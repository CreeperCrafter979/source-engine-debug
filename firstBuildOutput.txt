<waflib.extras.clang_compilation_database.ClangDbContext object at 0xb60927d0>
<waflib.extras.clang_compilation_database.ClangDbContext object at 0xb60927d0>
<waflib.extras.clang_compilation_database.ClangDbContext object at 0xb60927d0>
<waflib.extras.clang_compilation_database.ClangDbContext object at 0xb60927d0>
<waflib.extras.clang_compilation_database.ClangDbContext object at 0xb60927d0>
<waflib.extras.clang_compilation_database.ClangDbContext object at 0xb60927d0>
<waflib.extras.clang_compilation_database.ClangDbContext object at 0xb60927d0>
Build commands will be stored in build/compile_commands.json
Waf: Entering directory `/home/pi/Downloads/source-engine/build'
<waflib.Build.BuildContext object at 0xb610c4f0>
<waflib.Build.BuildContext object at 0xb610c4f0>
<waflib.Build.BuildContext object at 0xb610c4f0>
<waflib.Build.BuildContext object at 0xb610c4f0>
<waflib.Build.BuildContext object at 0xb610c4f0>
<waflib.Build.BuildContext object at 0xb610c4f0>
<waflib.Build.BuildContext object at 0xb610c4f0>
[   1/2160] Compiling tier0/vprof.cpp
[   2/2160] Compiling tier0/vcrmode_posix.cpp
[   3/2160] Compiling tier0/tslist.cpp
[   4/2160] Compiling tier0/tier0_strtools.cpp
In file included from ../tier0/vcrmode_posix.cpp:18:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
../tier0/vcrmode_posix.cpp: In function ‘void OutputDebugStringFormat(const char*, ...)’:
../tier0/vcrmode_posix.cpp:132:30: warning: comparison of integer expressions of different signedness: ‘int’ and ‘unsigned int’ [-Wsign-compare]
   VCR_RuntimeAssert( tempLen <= sizeof( tempData ) );
                      ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
../tier0/vcrmode_posix.cpp:30:50: note: in definition of macro ‘VCR_RuntimeAssert’
 #define VCR_RuntimeAssert(x) VCR_RuntimeAssertFn(x, #x)
                                                  ^

[   5/2160] Compiling tier0/threadtools.cpp
[   6/2160] Compiling tier0/thread.cpp
In file included from ../public/tier0/tslist.h:27,
                 from ../tier0/tslist.cpp:8:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier0/tslist.h:28,
                 from ../tier0/tslist.cpp:8:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^

[   7/2160] Compiling tier0/systeminformation.cpp
In file included from ../tier0/thread.cpp:20:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~

[   8/2160] Compiling tier0/pme_posix.cpp
In file included from ../tier0/threadtools.cpp:64:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier0/memdbgon.h:34,
                 from ../tier0/threadtools.cpp:74:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../tier0/threadtools.cpp: In member function ‘void CThreadSpinRWLock::UnlockWrite()’:
../tier0/threadtools.cpp:1626:42: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  ThreadInterlockedExchange64(  (int64 *)&m_lockInfo, *((int64 *)&newValue) );
                                          ^~~~~~~~~~
../tier0/threadtools.cpp:1626:66: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  ThreadInterlockedExchange64(  (int64 *)&m_lockInfo, *((int64 *)&newValue) );
                                                                  ^~~~~~~~
../tier0/threadtools.cpp: In static member function ‘static unsigned int CThread::ThreadProc(LPVOID)’:
../tier0/threadtools.cpp:2120:8: warning: ‘template<class> class std::auto_ptr’ is deprecated [-Wdeprecated-declarations]
   std::auto_ptr<ThreadInit_t> pInit((ThreadInit_t *)pv);
        ^~~~~~~~
In file included from /usr/include/c++/8/memory:80,
                 from ../tier0/threadtools.cpp:61:
/usr/include/c++/8/bits/unique_ptr.h:53:28: note: declared here
   template<typename> class auto_ptr;
                            ^~~~~~~~

[   9/2160] Compiling tier0/mem_helpers.cpp
[  10/2160] Compiling tier0/fasttimer.cpp
In file included from ../public/tier0/vprof.h:14,
                 from ../tier0/pme_posix.cpp:8:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../tier0/pme_posix.cpp:8:
../public/tier0/vprof.h: In constructor ‘CVProfNode::CVProfNode(const tchar*, int, CVProfNode*, const tchar*, int)’:
../public/tier0/vprof.h:390:11: warning: ‘CVProfNode::m_nPrevFrameCalls’ will be initialized after [-Wreorder]
  unsigned m_nPrevFrameCalls;
           ^~~~~~~~~~~~~~~~~
../public/tier0/vprof.h:385:8: warning:   ‘int CVProfNode::m_nRecursions’ [-Wreorder]
  int   m_nRecursions;
        ^~~~~~~~~~~~~
../public/tier0/vprof.h:778:8: warning:   when initialized here [-Wreorder]
 inline CVProfNode::CVProfNode( const tchar * pszName, int detailLevel, CVProfNode *pParent, const tchar *pBudgetGroupName, int budgetFlags )
        ^~~~~~~~~~

[  11/2160] Compiling tier0/dynfunction.cpp
../tier0/vprof.cpp:25: warning: ignoring #pragma warning  [-Wunknown-pragmas]
 #pragma warning(push, 1)
 
../tier0/vprof.cpp:26: warning: ignoring #pragma warning  [-Wunknown-pragmas]
 #pragma warning(disable:4786)
 
../tier0/vprof.cpp:27: warning: ignoring #pragma warning  [-Wunknown-pragmas]
 #pragma warning(disable:4530)
 
../tier0/vprof.cpp:31: warning: ignoring #pragma warning  [-Wunknown-pragmas]
 #pragma warning(pop)
 
In file included from ../tier0/vprof.cpp:10:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
In file included from ../public/tier0/vprof.h:14,
                 from ../tier0/vprof.cpp:34:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../tier0/vprof.cpp:34:
../public/tier0/vprof.h: In constructor ‘CVProfNode::CVProfNode(const tchar*, int, CVProfNode*, const tchar*, int)’:
../public/tier0/vprof.h:390:11: warning: ‘CVProfNode::m_nPrevFrameCalls’ will be initialized after [-Wreorder]
  unsigned m_nPrevFrameCalls;
           ^~~~~~~~~~~~~~~~~
../public/tier0/vprof.h:385:8: warning:   ‘int CVProfNode::m_nRecursions’ [-Wreorder]
  int   m_nRecursions;
        ^~~~~~~~~~~~~
../public/tier0/vprof.h:778:8: warning:   when initialized here [-Wreorder]
 inline CVProfNode::CVProfNode( const tchar * pszName, int detailLevel, CVProfNode *pParent, const tchar *pBudgetGroupName, int budgetFlags )
        ^~~~~~~~~~
../public/tier0/vprof.h: In constructor ‘CVProfile::CVProfile()’:
../public/tier0/vprof.h:637:13: warning: ‘CVProfile::m_Root’ will be initialized after [-Wreorder]
  CVProfNode m_Root;
             ^~~~~~
../public/tier0/vprof.h:636:14: warning:   ‘CVProfNode* CVProfile::m_pCurNode’ [-Wreorder]
  CVProfNode *m_pCurNode;
              ^~~~~~~~~~
../tier0/vprof.cpp:1407:1: warning:   when initialized here [-Wreorder]
 CVProfile::CVProfile()
 ^~~~~~~~~
In file included from ../tier0/vprof.cpp:34:
../public/tier0/vprof.h:638:8: warning: ‘CVProfile::m_nFrames’ will be initialized after [-Wreorder]
  int   m_nFrames;
        ^~~~~~~~~
../public/tier0/vprof.h:634:8: warning:   ‘int CVProfile::m_enabled’ [-Wreorder]
  int   m_enabled;
        ^~~~~~~~~
../tier0/vprof.cpp:1407:1: warning:   when initialized here [-Wreorder]
 CVProfile::CVProfile()
 ^~~~~~~~~
In file included from ../tier0/vprof.cpp:34:
../public/tier0/vprof.h:640:8: warning: ‘CVProfile::m_pausedEnabledDepth’ will be initialized after [-Wreorder]
  int   m_pausedEnabledDepth;
        ^~~~~~~~~~~~~~~~~~~~
../public/tier0/vprof.h:635:8: warning:   ‘bool CVProfile::m_fAtRoot’ [-Wreorder]
  bool  m_fAtRoot; // tracked for efficiency of the "not profiling" case
        ^~~~~~~~~
../tier0/vprof.cpp:1407:1: warning:   when initialized here [-Wreorder]
 CVProfile::CVProfile()
 ^~~~~~~~~
../tier0/vprof.cpp: In function ‘void DumpSorted(CVProfile::StreamOut_t, const tchar*, double, bool (*)(const TimeSums_t&, const TimeSums_t&), int)’:
../tier0/vprof.cpp:1218:6: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
  sort( sortedSums.begin(), sortedSums.end(), pfnSort );
  ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/8/vector:64,
                 from ../tier0/vprof.cpp:29:
/usr/include/c++/8/bits/stl_vector.h: In member function ‘void std::vector<_Tp, _Alloc>::push_back(const value_type&) [with _Tp = TimeSums_t; _Alloc = std::allocator<TimeSums_t>]’:
/usr/include/c++/8/bits/stl_vector.h:1085:4: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
    _M_realloc_insert(end(), __x);
    ^~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/8/vector:69,
                 from ../tier0/vprof.cpp:29:
/usr/include/c++/8/bits/vector.tcc: In member function ‘std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const std::vector<_Tp, _Alloc>&) [with _Tp = TimeSums_t; _Alloc = std::allocator<TimeSums_t>]’:
/usr/include/c++/8/bits/vector.tcc:214:16: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
        pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
                ^~~~~
/usr/include/c++/8/bits/vector.tcc:226:21: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
        std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
        ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        end(), _M_get_Tp_allocator());
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/8/bits/vector.tcc:226:21: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
In file included from /usr/include/c++/8/algorithm:62,
                 from ../tier0/vprof.cpp:30:
/usr/include/c++/8/bits/stl_algo.h: In function ‘void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >; _Compare = bool (*)(const TimeSums_t&, const TimeSums_t&)]’:
/usr/include/c++/8/bits/stl_algo.h:4854:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
     ^~~~
/usr/include/c++/8/bits/stl_algo.h:4854:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_algo.h:4866:18: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
       std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
       ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/8/vector:69,
                 from ../tier0/vprof.cpp:29:
/usr/include/c++/8/bits/vector.tcc: In member function ‘void std::vector<_Tp, _Alloc>::_M_realloc_insert(std::vector<_Tp, _Alloc>::iterator, _Args&& ...) [with _Args = {const TimeSums_t&}; _Tp = TimeSums_t; _Alloc = std::allocator<TimeSums_t>]’:
/usr/include/c++/8/bits/vector.tcc:413:7: note: parameter passing for argument of type ‘std::vector<TimeSums_t>::iterator’ {aka ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’} changed in GCC 7.1
       vector<_Tp, _Alloc>::
       ^~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/8/vector:64,
                 from ../tier0/vprof.cpp:29:
/usr/include/c++/8/bits/stl_vector.h: In member function ‘std::vector<_Tp, _Alloc>::pointer std::vector<_Tp, _Alloc>::_M_allocate_and_copy(std::vector<_Tp, _Alloc>::size_type, _ForwardIterator, _ForwardIterator) [with _ForwardIterator = __gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >; _Tp = TimeSums_t; _Alloc = std::allocator<TimeSums_t>]’:
/usr/include/c++/8/bits/stl_vector.h:1395:2: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
  _M_allocate_and_copy(size_type __n,
  ^~~~~~~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_vector.h:1395:2: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_vector.h:1401:35: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
        std::__uninitialized_copy_a(__first, __last, __result,
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
        _M_get_Tp_allocator());
        ~~~~~~~~~~~~~~~~~~~~~~      
In file included from /usr/include/c++/8/bits/stl_tree.h:63,
                 from /usr/include/c++/8/map:60,
                 from ../tier0/pch_tier0.h:40,
                 from ../tier0/vprof.cpp:8:
/usr/include/c++/8/bits/stl_algobase.h: In function ‘_OI std::copy(_II, _II, _OI) [with _II = __gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >; _OI = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >]’:
/usr/include/c++/8/bits/stl_algobase.h:446:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     copy(_II __first, _II __last, _OI __result)
     ^~~~
/usr/include/c++/8/bits/stl_algobase.h:446:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_algobase.h:446:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_algobase.h:455:8: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
       return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        (std::__miter_base(__first), std::__miter_base(__last),
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         __result));
         ~~~~~~~~~~
In file included from /usr/include/c++/8/vector:62,
                 from ../tier0/vprof.cpp:29:
/usr/include/c++/8/bits/stl_construct.h: In function ‘void std::_Destroy(_ForwardIterator, _ForwardIterator, std::allocator<_T2>&) [with _ForwardIterator = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >; _Tp = TimeSums_t]’:
/usr/include/c++/8/bits/stl_construct.h:203:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
     ^~~~~~~~
/usr/include/c++/8/bits/stl_construct.h:203:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_construct.h:206:15: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
       _Destroy(__first, __last);
       ~~~~~~~~^~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/8/algorithm:62,
                 from ../tier0/vprof.cpp:30:
/usr/include/c++/8/bits/stl_algo.h: In function ‘void std::__sort(_RandomAccessIterator, _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(const TimeSums_t&, const TimeSums_t&)>]’:
/usr/include/c++/8/bits/stl_algo.h:1963:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
     ^~~~~~
/usr/include/c++/8/bits/stl_algo.h:1963:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_algo.h:1968:25: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
    std::__introsort_loop(__first, __last,
    ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~
     std::__lg(__last - __first) * 2,
     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     __comp);
     ~~~~~~~              
/usr/include/c++/8/bits/stl_algo.h:1971:31: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
    std::__final_insertion_sort(__first, __last, __comp);
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/8/vector:63,
                 from ../tier0/vprof.cpp:29:
/usr/include/c++/8/bits/stl_uninitialized.h: In function ‘_ForwardIterator std::__uninitialized_move_if_noexcept_a(_InputIterator, _InputIterator, _ForwardIterator, _Allocator&) [with _InputIterator = TimeSums_t*; _ForwardIterator = TimeSums_t*; _Allocator = std::allocator<TimeSums_t>]’:
/usr/include/c++/8/bits/stl_uninitialized.h:311:2: note: parameter passing for argument of type ‘std::move_iterator<TimeSums_t*>’ changed in GCC 7.1
       return std::__uninitialized_copy_a
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  (_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_uninitialized.h: In function ‘_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = __gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >; _ForwardIterator = TimeSums_t*; _Tp = TimeSums_t]’:
/usr/include/c++/8/bits/stl_uninitialized.h:287:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
     ^~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_uninitialized.h:287:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_uninitialized.h:289:37: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     { return std::uninitialized_copy(__first, __last, __result); }
              ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/8/cmath:42,
                 from /usr/include/c++/8/math.h:36,
                 from ../public/tier0/basetypes.h:206,
                 from ../tier0/pch_tier0.h:20,
                 from ../tier0/vprof.cpp:8:
/usr/include/c++/8/bits/cpp_type_traits.h: In function ‘_Iterator std::__miter_base(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >]’:
/usr/include/c++/8/bits/cpp_type_traits.h:419:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     __miter_base(_Iterator __it)
     ^~~~~~~~~~~~
In file included from /usr/include/c++/8/bits/stl_tree.h:63,
                 from /usr/include/c++/8/map:60,
                 from ../tier0/pch_tier0.h:40,
                 from ../tier0/vprof.cpp:8:
/usr/include/c++/8/bits/stl_algobase.h: In function ‘_OI std::__copy_move_a2(_II, _II, _OI) [with bool _IsMove = false; _II = __gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >; _OI = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >]’:
/usr/include/c++/8/bits/stl_algobase.h:420:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     __copy_move_a2(_II __first, _II __last, _OI __result)
     ^~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algobase.h:420:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_algobase.h:420:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
In file included from /usr/include/c++/8/vector:62,
                 from ../tier0/vprof.cpp:29:
/usr/include/c++/8/bits/stl_construct.h: In function ‘void std::_Destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >]’:
/usr/include/c++/8/bits/stl_construct.h:127:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     _Destroy(_ForwardIterator __first, _ForwardIterator __last)
     ^~~~~~~~
/usr/include/c++/8/bits/stl_construct.h:127:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_construct.h:137:11: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
       std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  __destroy(__first, __last);
  ~~~~~~~~~^~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/8/algorithm:62,
                 from ../tier0/vprof.cpp:30:
/usr/include/c++/8/bits/stl_algo.h: In function ‘void std::__introsort_loop(_RandomAccessIterator, _RandomAccessIterator, _Size, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >; _Size = int; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(const TimeSums_t&, const TimeSums_t&)>]’:
/usr/include/c++/8/bits/stl_algo.h:1940:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     __introsort_loop(_RandomAccessIterator __first,
     ^~~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h:1940:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_algo.h:1948:27: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
        std::__partial_sort(__first, __last, __last, __comp);
        ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h:1953:38: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
      std::__unguarded_partition_pivot(__first, __last, __comp);
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h:1954:25: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
    std::__introsort_loop(__cut, __last, __depth_limit, __comp);
    ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h: In function ‘void std::__final_insertion_sort(_RandomAccessIterator, _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(const TimeSums_t&, const TimeSums_t&)>]’:
/usr/include/c++/8/bits/stl_algo.h:1880:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     __final_insertion_sort(_RandomAccessIterator __first,
     ^~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h:1880:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_algo.h:1885:25: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
    std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
    ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h:1886:35: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
    std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        __comp);
        ~~~~~~~                     
/usr/include/c++/8/bits/stl_algo.h:1890:23: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
  std::__insertion_sort(__first, __last, __comp);
  ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/8/vector:63,
                 from ../tier0/vprof.cpp:29:
/usr/include/c++/8/bits/stl_uninitialized.h: In function ‘_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = std::move_iterator<TimeSums_t*>; _ForwardIterator = TimeSums_t*; _Tp = TimeSums_t]’:
/usr/include/c++/8/bits/stl_uninitialized.h:287:5: note: parameter passing for argument of type ‘std::move_iterator<TimeSums_t*>’ changed in GCC 7.1
     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
     ^~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_uninitialized.h:287:5: note: parameter passing for argument of type ‘std::move_iterator<TimeSums_t*>’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_uninitialized.h:289:37: note: parameter passing for argument of type ‘std::move_iterator<TimeSums_t*>’ changed in GCC 7.1
     { return std::uninitialized_copy(__first, __last, __result); }
              ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_uninitialized.h: In function ‘_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = __gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >; _ForwardIterator = TimeSums_t*]’:
/usr/include/c++/8/bits/stl_uninitialized.h:115:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     uninitialized_copy(_InputIterator __first, _InputIterator __last,
     ^~~~~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_uninitialized.h:115:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_uninitialized.h:134:15: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
       return std::__uninitialized_copy<__is_trivial(_ValueType1)
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            && __is_trivial(_ValueType2)
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            && __assignable>::
            ~~~~~~~~~~~~~~~~~~
  __uninit_copy(__first, __last, __result);
  ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/8/bits/stl_algobase.h:67,
                 from /usr/include/c++/8/bits/stl_tree.h:63,
                 from /usr/include/c++/8/map:60,
                 from ../tier0/pch_tier0.h:40,
                 from ../tier0/vprof.cpp:8:
/usr/include/c++/8/bits/stl_iterator.h: In function ‘_Iterator std::__niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container>) [with _Iterator = const TimeSums_t*; _Container = std::vector<TimeSums_t>]’:
/usr/include/c++/8/bits/stl_iterator.h:987:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
     ^~~~~~~~~~~~
/usr/include/c++/8/bits/stl_iterator.h: In function ‘_Iterator std::__niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container>) [with _Iterator = TimeSums_t*; _Container = std::vector<TimeSums_t>]’:
/usr/include/c++/8/bits/stl_iterator.h:987:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
In file included from /usr/include/c++/8/vector:62,
                 from ../tier0/vprof.cpp:29:
/usr/include/c++/8/bits/stl_construct.h: In static member function ‘static void std::_Destroy_aux<true>::__destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >]’:
/usr/include/c++/8/bits/stl_construct.h:117:9: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
         __destroy(_ForwardIterator, _ForwardIterator) { }
         ^~~~~~~~~
/usr/include/c++/8/bits/stl_construct.h:117:9: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
In file included from /usr/include/c++/8/algorithm:62,
                 from ../tier0/vprof.cpp:30:
/usr/include/c++/8/bits/stl_algo.h: In function ‘void std::__partial_sort(_RandomAccessIterator, _RandomAccessIterator, _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(const TimeSums_t&, const TimeSums_t&)>]’:
/usr/include/c++/8/bits/stl_algo.h:1928:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     __partial_sort(_RandomAccessIterator __first,
     ^~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h:1928:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_algo.h:1928:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_algo.h:1933:25: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
       std::__heap_select(__first, __middle, __last, __comp);
       ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h:1934:23: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
       std::__sort_heap(__first, __middle, __comp);
       ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h: In function ‘_RandomAccessIterator std::__unguarded_partition_pivot(_RandomAccessIterator, _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(const TimeSums_t&, const TimeSums_t&)>]’:
/usr/include/c++/8/bits/stl_algo.h:1917:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     __unguarded_partition_pivot(_RandomAccessIterator __first,
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h:1917:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_algo.h:1921:34: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
       std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       __comp);
       ~~~~~~~                     
/usr/include/c++/8/bits/stl_algo.h:1921:34: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_algo.h:1923:40: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
       return std::__unguarded_partition(__first + 1, __last, __first, __comp);
              ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h: In function ‘void std::__insertion_sort(_RandomAccessIterator, _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(const TimeSums_t&, const TimeSums_t&)>]’:
/usr/include/c++/8/bits/stl_algo.h:1840:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     __insertion_sort(_RandomAccessIterator __first,
     ^~~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h:1840:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_algo.h:1847:14: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
    if (__comp(__i, __first))
        ~~~~~~^~~~~~~~~~~~~~
In file included from /usr/include/c++/8/bits/stl_tree.h:63,
                 from /usr/include/c++/8/map:60,
                 from ../tier0/pch_tier0.h:40,
                 from ../tier0/vprof.cpp:8:
/usr/include/c++/8/bits/stl_algo.h:1851:8: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
        _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
        ^~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/8/algorithm:62,
                 from ../tier0/vprof.cpp:30:
/usr/include/c++/8/bits/stl_algo.h: In function ‘void std::__unguarded_insertion_sort(_RandomAccessIterator, _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(const TimeSums_t&, const TimeSums_t&)>]’:
/usr/include/c++/8/bits/stl_algo.h:1863:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     __unguarded_insertion_sort(_RandomAccessIterator __first,
     ^~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h:1863:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
In file included from /usr/include/c++/8/vector:63,
                 from ../tier0/vprof.cpp:29:
/usr/include/c++/8/bits/stl_uninitialized.h: In function ‘_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = std::move_iterator<TimeSums_t*>; _ForwardIterator = TimeSums_t*]’:
/usr/include/c++/8/bits/stl_uninitialized.h:115:5: note: parameter passing for argument of type ‘std::move_iterator<TimeSums_t*>’ changed in GCC 7.1
     uninitialized_copy(_InputIterator __first, _InputIterator __last,
     ^~~~~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_uninitialized.h:115:5: note: parameter passing for argument of type ‘std::move_iterator<TimeSums_t*>’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_uninitialized.h:134:15: note: parameter passing for argument of type ‘std::move_iterator<TimeSums_t*>’ changed in GCC 7.1
       return std::__uninitialized_copy<__is_trivial(_ValueType1)
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            && __is_trivial(_ValueType2)
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            && __assignable>::
            ~~~~~~~~~~~~~~~~~~
  __uninit_copy(__first, __last, __result);
  ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_uninitialized.h: In static member function ‘static _ForwardIterator std::__uninitialized_copy<true>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = __gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >; _ForwardIterator = TimeSums_t*]’:
/usr/include/c++/8/bits/stl_uninitialized.h:99:9: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
         __uninit_copy(_InputIterator __first, _InputIterator __last,
         ^~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_uninitialized.h:99:9: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_uninitialized.h:101:27: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
         { return std::copy(__first, __last, __result); }
                  ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/8/algorithm:62,
                 from ../tier0/vprof.cpp:30:
/usr/include/c++/8/bits/stl_algo.h: In function ‘void std::__heap_select(_RandomAccessIterator, _RandomAccessIterator, _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(const TimeSums_t&, const TimeSums_t&)>]’:
/usr/include/c++/8/bits/stl_algo.h:1668:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     __heap_select(_RandomAccessIterator __first,
     ^~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h:1668:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_algo.h:1668:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_algo.h:1672:23: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
       std::__make_heap(__first, __middle, __comp);
       ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h:1674:12: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
  if (__comp(__i, __first))
      ~~~~~~^~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h:1675:19: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
    std::__pop_heap(__first, __middle, __i, __comp);
    ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/8/bits/stl_algo.h:61,
                 from /usr/include/c++/8/algorithm:62,
                 from ../tier0/vprof.cpp:30:
/usr/include/c++/8/bits/stl_heap.h: In function ‘void std::__sort_heap(_RandomAccessIterator, _RandomAccessIterator, _Compare&) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(const TimeSums_t&, const TimeSums_t&)>]’:
/usr/include/c++/8/bits/stl_heap.h:402:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
     ^~~~~~~~~~~
/usr/include/c++/8/bits/stl_heap.h:402:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_heap.h:408:19: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
    std::__pop_heap(__first, __last, __last, __comp);
    ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/8/algorithm:62,
                 from ../tier0/vprof.cpp:30:
/usr/include/c++/8/bits/stl_algo.h: In function ‘void std::__move_median_to_first(_Iterator, _Iterator, _Iterator, _Iterator, _Compare) [with _Iterator = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(const TimeSums_t&, const TimeSums_t&)>]’:
/usr/include/c++/8/bits/stl_algo.h:78:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
     ^~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h:78:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_algo.h:78:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_algo.h:78:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_algo.h:81:17: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
       if (__comp(__a, __b))
           ~~~~~~^~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h:83:14: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
    if (__comp(__b, __c))
        ~~~~~~^~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h:84:20: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
      std::iter_swap(__result, __b);
      ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h:85:19: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
    else if (__comp(__a, __c))
             ~~~~~~^~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h:86:20: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
      std::iter_swap(__result, __c);
      ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h:88:20: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
      std::iter_swap(__result, __a);
      ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h:90:22: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
       else if (__comp(__a, __c))
                ~~~~~~^~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h:91:16: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
  std::iter_swap(__result, __a);
  ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h:92:22: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
       else if (__comp(__b, __c))
                ~~~~~~^~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h:93:16: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
  std::iter_swap(__result, __c);
  ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h:95:16: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
  std::iter_swap(__result, __b);
  ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h: In function ‘_RandomAccessIterator std::__unguarded_partition(_RandomAccessIterator, _RandomAccessIterator, _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(const TimeSums_t&, const TimeSums_t&)>]’:
/usr/include/c++/8/bits/stl_algo.h:1896:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     __unguarded_partition(_RandomAccessIterator __first,
     ^~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h:1896:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_algo.h:1896:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_algo.h:1902:17: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
    while (__comp(__first, __pivot))
           ~~~~~~^~~~~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h:1905:17: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
    while (__comp(__pivot, __last))
           ~~~~~~^~~~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algo.h:1909:18: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
    std::iter_swap(__first, __last);
    ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/8/bits/stl_algobase.h:71,
                 from /usr/include/c++/8/bits/stl_tree.h:63,
                 from /usr/include/c++/8/map:60,
                 from ../tier0/pch_tier0.h:40,
                 from ../tier0/vprof.cpp:8:
/usr/include/c++/8/bits/predefined_ops.h: In member function ‘bool __gnu_cxx::__ops::_Iter_comp_iter<_Compare>::operator()(_Iterator1, _Iterator2) [with _Iterator1 = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >; _Iterator2 = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >; _Compare = bool (*)(const TimeSums_t&, const TimeSums_t&)]’:
/usr/include/c++/8/bits/predefined_ops.h:142:9: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
         operator()(_Iterator1 __it1, _Iterator2 __it2)
         ^~~~~~~~
/usr/include/c++/8/bits/predefined_ops.h:142:9: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
In file included from /usr/include/c++/8/bits/stl_tree.h:63,
                 from /usr/include/c++/8/map:60,
                 from ../tier0/pch_tier0.h:40,
                 from ../tier0/vprof.cpp:8:
/usr/include/c++/8/bits/stl_algobase.h: In function ‘_BI2 std::move_backward(_BI1, _BI1, _BI2) [with _BI1 = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >; _BI2 = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >]’:
/usr/include/c++/8/bits/stl_algobase.h:658:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
     ^~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algobase.h:658:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_algobase.h:658:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_algobase.h:668:48: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
       return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
       std::__miter_base(__last),
       ~~~~~~~~~~~~~~~~~~~~~~~~~~                
       __result);
       ~~~~~~~~~                                 
In file included from /usr/include/c++/8/algorithm:62,
                 from ../tier0/vprof.cpp:30:
/usr/include/c++/8/bits/stl_algo.h: In function ‘void std::__unguarded_linear_insert(_RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >; _Compare = __gnu_cxx::__ops::_Val_comp_iter<bool (*)(const TimeSums_t&, const TimeSums_t&)>]’:
/usr/include/c++/8/bits/stl_algo.h:1821:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     __unguarded_linear_insert(_RandomAccessIterator __last,
     ^~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/8/vector:63,
                 from ../tier0/vprof.cpp:29:
/usr/include/c++/8/bits/stl_uninitialized.h: In static member function ‘static _ForwardIterator std::__uninitialized_copy<true>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = std::move_iterator<TimeSums_t*>; _ForwardIterator = TimeSums_t*]’:
/usr/include/c++/8/bits/stl_uninitialized.h:99:9: note: parameter passing for argument of type ‘std::move_iterator<TimeSums_t*>’ changed in GCC 7.1
         __uninit_copy(_InputIterator __first, _InputIterator __last,
         ^~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_uninitialized.h:99:9: note: parameter passing for argument of type ‘std::move_iterator<TimeSums_t*>’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_uninitialized.h:101:27: note: parameter passing for argument of type ‘std::move_iterator<TimeSums_t*>’ changed in GCC 7.1
         { return std::copy(__first, __last, __result); }
                  ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/8/bits/stl_tree.h:63,
                 from /usr/include/c++/8/map:60,
                 from ../tier0/pch_tier0.h:40,
                 from ../tier0/vprof.cpp:8:
/usr/include/c++/8/bits/stl_algobase.h: In function ‘_OI std::copy(_II, _II, _OI) [with _II = __gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >; _OI = TimeSums_t*]’:
/usr/include/c++/8/bits/stl_algobase.h:446:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     copy(_II __first, _II __last, _OI __result)
     ^~~~
/usr/include/c++/8/bits/stl_algobase.h:446:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_algobase.h:455:8: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
       return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        (std::__miter_base(__first), std::__miter_base(__last),
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         __result));
         ~~~~~~~~~~
In file included from /usr/include/c++/8/bits/stl_algo.h:61,
                 from /usr/include/c++/8/algorithm:62,
                 from ../tier0/vprof.cpp:30:
/usr/include/c++/8/bits/stl_heap.h: In function ‘void std::__make_heap(_RandomAccessIterator, _RandomAccessIterator, _Compare&) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(const TimeSums_t&, const TimeSums_t&)>]’:
/usr/include/c++/8/bits/stl_heap.h:326:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
     ^~~~~~~~~~~
/usr/include/c++/8/bits/stl_heap.h:326:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_heap.h: In function ‘void std::__pop_heap(_RandomAccessIterator, _RandomAccessIterator, _RandomAccessIterator, _Compare&) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(const TimeSums_t&, const TimeSums_t&)>]’:
/usr/include/c++/8/bits/stl_heap.h:243:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
     ^~~~~~~~~~
/usr/include/c++/8/bits/stl_heap.h:243:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_heap.h:243:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
In file included from /usr/include/c++/8/bits/stl_tree.h:63,
                 from /usr/include/c++/8/map:60,
                 from ../tier0/pch_tier0.h:40,
                 from ../tier0/vprof.cpp:8:
/usr/include/c++/8/bits/stl_algobase.h: In function ‘void std::iter_swap(_ForwardIterator1, _ForwardIterator2) [with _ForwardIterator1 = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >; _ForwardIterator2 = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >]’:
/usr/include/c++/8/bits/stl_algobase.h:120:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
     ^~~~~~~~~
/usr/include/c++/8/bits/stl_algobase.h:120:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
In file included from /usr/include/c++/8/cmath:42,
                 from /usr/include/c++/8/math.h:36,
                 from ../public/tier0/basetypes.h:206,
                 from ../tier0/pch_tier0.h:20,
                 from ../tier0/vprof.cpp:8:
/usr/include/c++/8/bits/cpp_type_traits.h: In function ‘_Iterator std::__miter_base(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >]’:
/usr/include/c++/8/bits/cpp_type_traits.h:419:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     __miter_base(_Iterator __it)
     ^~~~~~~~~~~~
In file included from /usr/include/c++/8/bits/stl_tree.h:63,
                 from /usr/include/c++/8/map:60,
                 from ../tier0/pch_tier0.h:40,
                 from ../tier0/vprof.cpp:8:
/usr/include/c++/8/bits/stl_algobase.h: In function ‘_BI2 std::__copy_move_backward_a2(_BI1, _BI1, _BI2) [with bool _IsMove = true; _BI1 = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >; _BI2 = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >]’:
/usr/include/c++/8/bits/stl_algobase.h:595:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
     ^~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algobase.h:595:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_algobase.h:595:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
In file included from /usr/include/c++/8/bits/stl_algobase.h:71,
                 from /usr/include/c++/8/bits/stl_tree.h:63,
                 from /usr/include/c++/8/map:60,
                 from ../tier0/pch_tier0.h:40,
                 from ../tier0/vprof.cpp:8:
/usr/include/c++/8/bits/predefined_ops.h: In member function ‘bool __gnu_cxx::__ops::_Val_comp_iter<_Compare>::operator()(_Value&, _Iterator) [with _Value = TimeSums_t; _Iterator = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >; _Compare = bool (*)(const TimeSums_t&, const TimeSums_t&)]’:
/usr/include/c++/8/bits/predefined_ops.h:214:2: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
  operator()(_Value& __val, _Iterator __it)
  ^~~~~~~~
In file included from /usr/include/c++/8/bits/stl_tree.h:63,
                 from /usr/include/c++/8/map:60,
                 from ../tier0/pch_tier0.h:40,
                 from ../tier0/vprof.cpp:8:
/usr/include/c++/8/bits/stl_algobase.h: In function ‘_OI std::copy(_II, _II, _OI) [with _II = std::move_iterator<TimeSums_t*>; _OI = TimeSums_t*]’:
/usr/include/c++/8/bits/stl_algobase.h:446:5: note: parameter passing for argument of type ‘std::move_iterator<TimeSums_t*>’ changed in GCC 7.1
     copy(_II __first, _II __last, _OI __result)
     ^~~~
/usr/include/c++/8/bits/stl_algobase.h:446:5: note: parameter passing for argument of type ‘std::move_iterator<TimeSums_t*>’ changed in GCC 7.1
/usr/include/c++/8/bits/stl_algobase.h: In function ‘_OI std::__copy_move_a2(_II, _II, _OI) [with bool _IsMove = false; _II = __gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >; _OI = TimeSums_t*]’:
/usr/include/c++/8/bits/stl_algobase.h:420:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     __copy_move_a2(_II __first, _II __last, _OI __result)
     ^~~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_algobase.h:420:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<const TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
In file included from /usr/include/c++/8/bits/stl_algo.h:61,
                 from /usr/include/c++/8/algorithm:62,
                 from ../tier0/vprof.cpp:30:
/usr/include/c++/8/bits/stl_heap.h: In function ‘void std::__adjust_heap(_RandomAccessIterator, _Distance, _Distance, _Tp, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >; _Distance = int; _Tp = TimeSums_t; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(const TimeSums_t&, const TimeSums_t&)>]’:
/usr/include/c++/8/bits/stl_heap.h:214:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
     ^~~~~~~~~~~~~
/usr/include/c++/8/bits/stl_heap.h:222:14: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
    if (__comp(__first + __secondChild,
        ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~
        __first + (__secondChild - 1)))
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/8/bits/stl_algobase.h:67,
                 from /usr/include/c++/8/bits/stl_tree.h:63,
                 from /usr/include/c++/8/map:60,
                 from ../tier0/pch_tier0.h:40,
                 from ../tier0/vprof.cpp:8:
/usr/include/c++/8/bits/stl_iterator.h: In function ‘decltype (std::__miter_base(__it.base())) std::__miter_base(std::move_iterator<_IteratorL>) [with _Iterator = TimeSums_t*]’:
/usr/include/c++/8/bits/stl_iterator.h:1238:5: note: parameter passing for argument of type ‘std::move_iterator<TimeSums_t*>’ changed in GCC 7.1
     __miter_base(move_iterator<_Iterator> __it)
     ^~~~~~~~~~~~
In file included from /usr/include/c++/8/bits/stl_algo.h:61,
                 from /usr/include/c++/8/algorithm:62,
                 from ../tier0/vprof.cpp:30:
/usr/include/c++/8/bits/stl_heap.h: In function ‘void std::__push_heap(_RandomAccessIterator, _Distance, _Distance, _Tp, _Compare&) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >; _Distance = int; _Tp = TimeSums_t; _Compare = __gnu_cxx::__ops::_Iter_comp_val<bool (*)(const TimeSums_t&, const TimeSums_t&)>]’:
/usr/include/c++/8/bits/stl_heap.h:128:5: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
     __push_heap(_RandomAccessIterator __first,
     ^~~~~~~~~~~
/usr/include/c++/8/bits/stl_heap.h:133:48: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
       while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
                                          ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/8/bits/stl_algobase.h:71,
                 from /usr/include/c++/8/bits/stl_tree.h:63,
                 from /usr/include/c++/8/map:60,
                 from ../tier0/pch_tier0.h:40,
                 from ../tier0/vprof.cpp:8:
/usr/include/c++/8/bits/predefined_ops.h: In member function ‘bool __gnu_cxx::__ops::_Iter_comp_val<_Compare>::operator()(_Iterator, _Value&) [with _Iterator = __gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >; _Value = TimeSums_t; _Compare = bool (*)(const TimeSums_t&, const TimeSums_t&)]’:
/usr/include/c++/8/bits/predefined_ops.h:176:2: note: parameter passing for argument of type ‘__gnu_cxx::__normal_iterator<TimeSums_t*, std::vector<TimeSums_t> >’ changed in GCC 7.1
  operator()(_Iterator __it, _Value& __val)
  ^~~~~~~~

[  12/2160] Compiling tier0/dbg.cpp
[  13/2160] Compiling tier0/cpu_usage.cpp
[  14/2160] Compiling tier0/cpu_posix.cpp
In file included from ../public/tier0/memdbgon.h:34,
                 from ../tier0/dynfunction.cpp:33:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^

[  15/2160] Compiling tier0/cpumonitoring.cpp
[  16/2160] Compiling tier0/cpu.cpp
[  17/2160] Compiling tier0/commandline.cpp
In file included from ../tier0/dbg.cpp:25:
../public/Color.h: In constructor ‘Color::Color()’:
../public/Color.h:25:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = 0;
            ^~~~
../public/Color.h: In member function ‘void Color::SetRawColor(int)’:
../public/Color.h:59:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = color32;
            ^~~~
../public/Color.h: In member function ‘int Color::GetRawColor() const’:
../public/Color.h:64:19: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return *((int *)this);
                   ^~~~
../public/Color.h: In member function ‘bool Color::operator==(const Color&) const’:
../public/Color.h:84:21: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                     ^~~~
../public/Color.h:84:40: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                                        ^~~
In file included from ../tier0/dbg.cpp:27:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier0/memdbgon.h:34,
                 from ../tier0/dbg.cpp:46:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^

[  18/2160] Compiling tier0/assert_dialog.cpp
[  19/2160] Compiling tier0/mem.cpp
../tier0/cpu.cpp:378:23: warning: multi-character character constant [-Wmultichar]
   if (vendor_id[0] == 'uneG' && vendor_id[1] == 'Ieni' && vendor_id[2] == 'letn')
                       ^~~~~~
../tier0/cpu.cpp:378:49: warning: multi-character character constant [-Wmultichar]
   if (vendor_id[0] == 'uneG' && vendor_id[1] == 'Ieni' && vendor_id[2] == 'letn')
                                                 ^~~~~~
../tier0/cpu.cpp:378:75: warning: multi-character character constant [-Wmultichar]
   if (vendor_id[0] == 'uneG' && vendor_id[1] == 'Ieni' && vendor_id[2] == 'letn')
                                                                           ^~~~~~
In file included from ../public/tier0/memdbgon.h:34,
                 from ../tier0/cpu.cpp:19:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../tier0/cpu.cpp: In function ‘const CPUInformation* GetCPUInformation()’:
../tier0/cpu.cpp:469:29: warning: ‘void* memset(void*, int, size_t)’ clearing an object of non-trivial type ‘struct CPUInformation’; use assignment or value-initialization instead [-Wclass-memaccess]
  memset(&pi, 0x0, sizeof(pi));
                             ^
In file included from ../public/tier0/commonmacros.h:15,
                 from ../public/tier0/basetypes.h:11,
                 from ../tier0/pch_tier0.h:20,
                 from ../tier0/cpu.cpp:7:
../public/tier0/platform.h:1210:8: note: ‘struct CPUInformation’ declared here
 struct CPUInformation
        ^~~~~~~~~~~~~~

[  20/2160] Compiling tier0/PMELib.cpp
[  21/2160] Compiling tier0/memdbg.cpp
In file included from ../public/tier0/memdbgon.h:34,
                 from ../tier0/commandline.cpp:18:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../tier0/commandline.cpp: In member function ‘virtual void CCommandLine::CreateCmdLine(const char*)’:
../tier0/commandline.cpp:264:24: warning: comparison of integer expressions of different signedness: ‘int’ and ‘unsigned int’ [-Wsign-compare]
   if ( (pDst - szFull) >= (sizeof( szFull ) - 1) )
        ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~

[  22/2160] Compiling tier0/memstd.cpp
In file included from ../public/tier0/memdbgon.h:34,
                 from ../tier0/mem.cpp:15:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^

[  23/2160] Compiling tier0/stacktools.cpp
In file included from ../tier0/memdbg.cpp:16:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
In file included from ../tier0/memdbg.cpp:30:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~

[  24/2160] Compiling tier0/progressbar.cpp
In file included from ../tier0/assert_dialog.cpp:20:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~

[  25/2160] Compiling tier0/memvalidate.cpp
../tier0/memstd.cpp:364: warning: ignoring #pragma warning  [-Wunknown-pragmas]
 #pragma warning( disable:4074 ) // warning C4074: initializers put in compiler reserved initialization area
 
../tier0/memstd.cpp:365: warning: ignoring #pragma init_seg  [-Wunknown-pragmas]
 #pragma init_seg( compiler )
 
In file included from ../tier0/memstd.cpp:30:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
In file included from ../tier0/memstd.cpp:31:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
../tier0/memstd.cpp: At global scope:
../tier0/memstd.cpp:57:13: warning: ‘s_bPageHeapEnabled’ defined but not used [-Wunused-variable]
 static bool s_bPageHeapEnabled = false;
             ^~~~~~~~~~~~~~~~~~

[  26/2160] Compiling tier0/minidump.cpp
In file included from ../tier0/stacktools.cpp:11:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier0/memdbgon.h:34,
                 from ../tier0/stacktools.cpp:36:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^

[  27/2160] Compiling tier0/security.cpp
[  28/2160] Compiling tier0/pch_tier0.cpp
In file included from ../public/vstdlib/random.h:14,
                 from ../public/vstdlib/pch_vstdlib.h:34,
                 from ../tier0/progressbar.cpp:9:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlvector.h:24,
                 from ../public/tier1/KeyValues.h:25,
                 from ../public/vstdlib/pch_vstdlib.h:35,
                 from ../tier0/progressbar.cpp:9:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
In file included from ../public/tier1/KeyValues.h:26,
                 from ../public/vstdlib/pch_vstdlib.h:35,
                 from ../tier0/progressbar.cpp:9:
../public/Color.h: In constructor ‘Color::Color()’:
../public/Color.h:25:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = 0;
            ^~~~
../public/Color.h: In member function ‘void Color::SetRawColor(int)’:
../public/Color.h:59:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = color32;
            ^~~~
../public/Color.h: In member function ‘int Color::GetRawColor() const’:
../public/Color.h:64:19: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return *((int *)this);
                   ^~~~
../public/Color.h: In member function ‘bool Color::operator==(const Color&) const’:
../public/Color.h:84:21: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                     ^~~~
../public/Color.h:84:40: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                                        ^~~
In file included from ../public/vstdlib/pch_vstdlib.h:37,
                 from ../tier0/progressbar.cpp:9:
../public/tier1/utlrbtree.h: In instantiation of ‘CUtlRBTree<T, I, L, M>::CUtlRBTree(int, int, const LessFunc_t&) [with T = CUtlSymbolTable::CStringPoolIndex; I = short unsigned int; L = CUtlSymbolTable::CLess; M = CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, short unsigned int>, short unsigned int>; CUtlRBTree<T, I, L, M>::LessFunc_t = CUtlSymbolTable::CLess]’:
../public/tier1/utlsymbol.h:149:114:   required from here
../public/tier1/utlrbtree.h:300:4: warning: ‘CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, short unsigned int, CUtlSymbolTable::CLess>::m_Elements’ will be initialized after [-Wreorder]
  M m_Elements;
    ^~~~~~~~~~
../public/tier1/utlrbtree.h:298:13: warning:   ‘CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, short unsigned int, CUtlSymbolTable::CLess>::LessFunc_t CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, short unsigned int, CUtlSymbolTable::CLess>::m_LessFunc’ [-Wreorder]
  LessFunc_t m_LessFunc;
             ^~~~~~~~~~
../public/tier1/utlrbtree.h:378:8: warning:   when initialized here [-Wreorder]
 inline CUtlRBTree<T, I, L, M>::CUtlRBTree( int growSize, int initSize, const LessFunc_t &lessfunc ) :
        ^~~~~~~~~~~~~~~~~~~~~~

[  29/2160] Compiling tier0/platform_posix.cpp
../tier0/minidump.cpp: In function ‘void MinidumpUserStreamInfoAppend(const char*, ...)’:
../tier0/minidump.cpp:661:28: warning: comparison of integer expressions of different signedness: ‘int’ and ‘unsigned int’ [-Wsign-compare]
  if( g_UserStreamInfoIndex >= ARRAYSIZE( g_UserStreamInfo ) )
../tier0/minidump.cpp: In function ‘const char* MinidumpUserStreamInfoGet(int)’:
../tier0/minidump.cpp:674:31: warning: comparison of integer expressions of different signedness: ‘int’ and ‘unsigned int’ [-Wsign-compare]
  if( ( Index < 0 ) || ( Index >= (ARRAYSIZE( g_UserStreamInfo ) + 1) ) ) //+1 because we map 0 to the header
                         ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[  30/2160] Compiling tier1/utlsymbol.cpp
In file included from ../tier0/security.cpp:18:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^

[  31/2160] Compiling tier1/utlbufferutil.cpp
In file included from ../tier0/platform_posix.cpp:10:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../tier0/platform_posix.cpp: In function ‘const tchar* Plat_GetCommandLine()’:
../tier0/platform_posix.cpp:544:23: warning: comparison of integer expressions of different signedness: ‘int’ and ‘size_t’ {aka ‘unsigned int’} [-Wsign-compare]
     for( int i = 0; i < nCharRead; i++ )
                     ~~^~~~~~~~~~~

[  32/2160] Compiling tier1/tokenreader.cpp
[  33/2160] Compiling tier1/snappy-sinksource.cpp
[  34/2160] Compiling tier1/snappy.cpp
../tier1/utlbufferutil.cpp:9: warning: ignoring #pragma warning  [-Wunknown-pragmas]
 #pragma warning (disable : 4514)
 
In file included from ../public/tier1/utlvector.h:23,
                 from ../public/tier1/utlbufferutil.h:17,
                 from ../tier1/utlbufferutil.cpp:11:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlvector.h:24,
                 from ../public/tier1/utlbufferutil.h:17,
                 from ../tier1/utlbufferutil.cpp:11:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
In file included from ../tier1/utlbufferutil.cpp:17:
../public/Color.h: In constructor ‘Color::Color()’:
../public/Color.h:25:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = 0;
            ^~~~
../public/Color.h: In member function ‘void Color::SetRawColor(int)’:
../public/Color.h:59:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = color32;
            ^~~~
../public/Color.h: In member function ‘int Color::GetRawColor() const’:
../public/Color.h:64:19: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return *((int *)this);
                   ^~~~
../public/Color.h: In member function ‘bool Color::operator==(const Color&) const’:
../public/Color.h:84:21: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                     ^~~~
../public/Color.h:84:40: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                                        ^~~

[  35/2160] Linking build/tier0/libtier0.so
[  36/2160] Compiling tier1/qsort_s.cpp
../tier1/utlsymbol.cpp:9: warning: ignoring #pragma warning  [-Wunknown-pragmas]
 #pragma warning (disable:4514)
 
In file included from ../public/tier1/utlsymbol.h:16,
                 from ../tier1/utlsymbol.cpp:11:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlrbtree.h:12,
                 from ../public/tier1/utlsymbol.h:17,
                 from ../tier1/utlsymbol.cpp:11:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
In file included from ../public/tier1/KeyValues.h:26,
                 from ../tier1/utlsymbol.cpp:12:
../public/Color.h: In constructor ‘Color::Color()’:
../public/Color.h:25:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = 0;
            ^~~~
../public/Color.h: In member function ‘void Color::SetRawColor(int)’:
../public/Color.h:59:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = color32;
            ^~~~
../public/Color.h: In member function ‘int Color::GetRawColor() const’:
../public/Color.h:64:19: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return *((int *)this);
                   ^~~~
../public/Color.h: In member function ‘bool Color::operator==(const Color&) const’:
../public/Color.h:84:21: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                     ^~~~
../public/Color.h:84:40: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                                        ^~~
../tier1/utlsymbol.cpp: In member function ‘bool CUtlSymbolTable::CLess::operator()(const CUtlSymbolTable::CStringPoolIndex&, const CUtlSymbolTable::CStringPoolIndex&) const’:
../tier1/utlsymbol.cpp:144:109: warning: cast from ‘byte*’ {aka ‘unsigned char*’} to ‘CUtlSymbolTable*’ increases required alignment of target type [-Wcast-align]
  CUtlSymbolTable *pTable = (CUtlSymbolTable *)( (byte *)this - offsetof(CUtlSymbolTable::CTree, m_LessFunc) ) - offsetof(CUtlSymbolTable, m_Lookup );
                                                                                                             ^
../tier1/utlsymbol.cpp: In member function ‘void* CUtlFilenameSymbolTable::FindOrAddFileName(const char*)’:
../tier1/utlsymbol.cpp:359:42: warning: cast from ‘CUtlFilenameSymbolTable::FileNameHandleInternal_t*’ to ‘void**’ increases required alignment of target type [-Wcast-align]
  return *( FileNameHandle_t * )( &handle );
                                          ^
../tier1/utlsymbol.cpp: In member function ‘void* CUtlFilenameSymbolTable::FindFileName(const char*)’:
../tier1/utlsymbol.cpp:397:42: warning: cast from ‘CUtlFilenameSymbolTable::FileNameHandleInternal_t*’ to ‘void**’ increases required alignment of target type [-Wcast-align]
  return *( FileNameHandle_t * )( &handle );
                                          ^
In file included from ../public/tier1/utlsymbol.h:17,
                 from ../tier1/utlsymbol.cpp:11:
../public/tier1/utlrbtree.h: In instantiation of ‘CUtlRBTree<T, I, L, M>::CUtlRBTree(int, int, const LessFunc_t&) [with T = CUtlSymbolTable::CStringPoolIndex; I = short unsigned int; L = CUtlSymbolTable::CLess; M = CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, short unsigned int>, short unsigned int>; CUtlRBTree<T, I, L, M>::LessFunc_t = CUtlSymbolTable::CLess]’:
../public/tier1/utlsymbol.h:149:114:   required from here
../public/tier1/utlrbtree.h:300:4: warning: ‘CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, short unsigned int, CUtlSymbolTable::CLess>::m_Elements’ will be initialized after [-Wreorder]
  M m_Elements;
    ^~~~~~~~~~
../public/tier1/utlrbtree.h:298:13: warning:   ‘CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, short unsigned int, CUtlSymbolTable::CLess>::LessFunc_t CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, short unsigned int, CUtlSymbolTable::CLess>::m_LessFunc’ [-Wreorder]
  LessFunc_t m_LessFunc;
             ^~~~~~~~~~
../public/tier1/utlrbtree.h:378:8: warning:   when initialized here [-Wreorder]
 inline CUtlRBTree<T, I, L, M>::CUtlRBTree( int growSize, int initSize, const LessFunc_t &lessfunc ) :
        ^~~~~~~~~~~~~~~~~~~~~~
In file included from ../tier1/utlsymbol.cpp:16:
../public/tier1/utlhashtable.h: In instantiation of ‘void CUtlHashtableEntry<KeyT, ValueT>::MoveDataFrom(CUtlHashtableEntry<KeyT, ValueT>&) [with KeyT = CUtlStableHashtable<CUtlConstStringBase<char> >::IndirectIndex; ValueT = empty_t]’:
../public/tier1/utlhashtable.h:353:4:   required from ‘void CUtlHashtable<KeyT, ValueT, KeyHashT, KeyIsEqualT, AlternateKeyT>::DoRealloc(int) [with KeyT = CUtlStableHashtable<CUtlConstStringBase<char> >::IndirectIndex; ValueT = empty_t; KeyHashT = CUtlStableHashtable<CUtlConstStringBase<char> >::HashProxy; KeyIsEqualT = CUtlStableHashtable<CUtlConstStringBase<char> >::EqualProxy; AlternateKeyT = const char*]’
../public/tier1/utlhashtable.h:440:4:   required from ‘int CUtlHashtable<KeyT, ValueT, KeyHashT, KeyIsEqualT, AlternateKeyT>::DoInsertUnconstructed(unsigned int, bool) [with KeyT = CUtlStableHashtable<CUtlConstStringBase<char> >::IndirectIndex; ValueT = empty_t; KeyHashT = CUtlStableHashtable<CUtlConstStringBase<char> >::HashProxy; KeyIsEqualT = CUtlStableHashtable<CUtlConstStringBase<char> >::EqualProxy; AlternateKeyT = const char*]’
../public/tier1/utlhashtable.h:559:28:   required from ‘UtlHashHandle_t CUtlHashtable<KeyT, ValueT, KeyHashT, KeyIsEqualT, AlternateKeyT>::DoInsertNoCheck(KeyParamT, typename ArgumentTypeInfo<ValueT>::Arg_t, unsigned int) [with KeyParamT = CUtlStableHashtable<CUtlConstStringBase<char> >::IndirectIndex; KeyT = CUtlStableHashtable<CUtlConstStringBase<char> >::IndirectIndex; ValueT = empty_t; KeyHashT = CUtlStableHashtable<CUtlConstStringBase<char> >::HashProxy; KeyIsEqualT = CUtlStableHashtable<CUtlConstStringBase<char> >::EqualProxy; AlternateKeyT = const char*; UtlHashHandle_t = unsigned int; typename ArgumentTypeInfo<ValueT>::Arg_t = const empty_t&]’
../public/tier1/utlhashtable.h:969:2:   required from ‘UtlHashHandle_t CUtlStableHashtable<KeyT, ValueT, KeyHashT, KeyIsEqualT, IndexStorageT, AlternateKeyT>::DoInsert(KeyArgumentT) [with KeyArgumentT = const char*; KeyT = CUtlConstStringBase<char>; ValueT = empty_t; KeyHashT = DefaultHashFunctor<CUtlConstStringBase<char> >; KeyIsEqualT = DefaultEqualFunctor<CUtlConstStringBase<char> >; IndexStorageT = short unsigned int; AlternateKeyT = const char*; UtlHashHandle_t = unsigned int]’
../public/tier1/utlhashtable.h:810:66:   required from ‘UtlHashHandle_t CUtlStableHashtable<KeyT, ValueT, KeyHashT, KeyIsEqualT, IndexStorageT, AlternateKeyT>::Insert(CUtlStableHashtable<KeyT, ValueT, KeyHashT, KeyIsEqualT, IndexStorageT, AlternateKeyT>::KeyAlt_t) [with KeyT = CUtlConstStringBase<char>; ValueT = empty_t; KeyHashT = DefaultHashFunctor<CUtlConstStringBase<char> >; KeyIsEqualT = DefaultEqualFunctor<CUtlConstStringBase<char> >; IndexStorageT = short unsigned int; AlternateKeyT = const char*; UtlHashHandle_t = unsigned int; CUtlStableHashtable<KeyT, ValueT, KeyHashT, KeyIsEqualT, IndexStorageT, AlternateKeyT>::KeyAlt_t = const char*]’
../tier1/utlsymbol.cpp:343:44:   required from here
../public/tier1/utlhashtable.h:119:22: warning: comparison of integer expressions of different signedness: ‘int’ and ‘unsigned int’ [-Wsign-compare]
   for ( int i = 0; i < ARRAYSIZE( data ); ++i ) { data[i] = srcData[i]; }

[  37/2160] Compiling tier1/rangecheckedvar.cpp
[  38/2160] Compiling tier1/processor_detect_linux.cpp
../tier1/qsort_s.cpp: In function ‘void qsort_s(void*, size_t, size_t, int (*)(void*, const void*, const void*), void*)’:
../tier1/qsort_s.cpp:62:25: warning: comparison of integer expressions of different signedness: ‘int’ and ‘size_t’ {aka ‘unsigned int’} [-Wsign-compare]
       if ( limit - base > thresh ) {  /* if more than T elements  */
            ~~~~~~~~~~~~~^~~~~~~~

[  39/2160] Compiling tier1/splitstring.cpp
../tier1/snappy.cpp: In member function ‘bool snappy::SnappyIOVecWriter::Append(const char*, size_t)’:
../tier1/snappy.cpp:1026:33: warning: comparison of integer expressions of different signedness: ‘int’ and ‘const size_t’ {aka ‘const unsigned int’} [-Wsign-compare]
         if (curr_iov_index_ + 1 >= output_iov_count_) {
             ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~
../tier1/snappy.cpp: In member function ‘bool snappy::SnappyIOVecWriter::AppendFromSelf(size_t, size_t)’:
../tier1/snappy.cpp:1108:35: warning: comparison of integer expressions of different signedness: ‘int’ and ‘const size_t’ {aka ‘const unsigned int’} [-Wsign-compare]
           if (curr_iov_index_ + 1 >= output_iov_count_) {
               ~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~

[  40/2160] Compiling tier1/NetAdr.cpp
[  41/2160] Compiling tier1/utlstring.cpp
In file included from ../public/tier1/rangecheckedvar.h:15,
                 from ../tier1/rangecheckedvar.cpp:7:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier0/memdbgon.h:34,
                 from ../tier1/rangecheckedvar.cpp:10:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^

[  42/2160] Compiling tier1/memstack.cpp
In file included from ../public/tier0/memdbgon.h:34,
                 from ../tier1/NetAdr.cpp:27:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../tier1/NetAdr.cpp: In member function ‘void netadr_s::SetIP(uint)’:
../tier1/NetAdr.cpp:177:11: warning: cast from ‘unsigned char*’ to ‘uint*’ {aka ‘unsigned int*’} increases required alignment of target type [-Wcast-align]
  *((uint*)ip) = BigLong( unIP );
           ^~
../tier1/NetAdr.cpp: In member function ‘unsigned int netadr_s::GetIPNetworkByteOrder() const’:
../tier1/NetAdr.cpp:197:27: warning: cast from ‘const unsigned char (*)[4]’ to ‘unsigned int*’ increases required alignment of target type [-Wcast-align]
  return *(unsigned int *)&ip;
                           ^~
../tier1/NetAdr.cpp: In member function ‘void netadr_s::ToSockadr(sockaddr*) const’:
../tier1/NetAdr.cpp:211:25: warning: cast from ‘sockaddr*’ to ‘sockaddr_in*’ increases required alignment of target type [-Wcast-align]
   ((struct sockaddr_in*)s)->sin_family = AF_INET;
                         ^
../tier1/NetAdr.cpp:212:25: warning: cast from ‘sockaddr*’ to ‘sockaddr_in*’ increases required alignment of target type [-Wcast-align]
   ((struct sockaddr_in*)s)->sin_port = port;
                         ^
../tier1/NetAdr.cpp:213:25: warning: cast from ‘sockaddr*’ to ‘sockaddr_in*’ increases required alignment of target type [-Wcast-align]
   ((struct sockaddr_in*)s)->sin_addr.s_addr = INADDR_BROADCAST;
                         ^
../tier1/NetAdr.cpp:217:25: warning: cast from ‘sockaddr*’ to ‘sockaddr_in*’ increases required alignment of target type [-Wcast-align]
   ((struct sockaddr_in*)s)->sin_family = AF_INET;
                         ^
../tier1/NetAdr.cpp:218:25: warning: cast from ‘sockaddr*’ to ‘sockaddr_in*’ increases required alignment of target type [-Wcast-align]
   ((struct sockaddr_in*)s)->sin_addr.s_addr = *(int *)&ip;
                         ^
../tier1/NetAdr.cpp:218:56: warning: cast from ‘const unsigned char (*)[4]’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   ((struct sockaddr_in*)s)->sin_addr.s_addr = *(int *)&ip;
                                                        ^~
../tier1/NetAdr.cpp:219:25: warning: cast from ‘sockaddr*’ to ‘sockaddr_in*’ increases required alignment of target type [-Wcast-align]
   ((struct sockaddr_in*)s)->sin_port = port;
                         ^
../tier1/NetAdr.cpp:223:25: warning: cast from ‘sockaddr*’ to ‘sockaddr_in*’ increases required alignment of target type [-Wcast-align]
   ((struct sockaddr_in*)s)->sin_family = AF_INET;
                         ^
../tier1/NetAdr.cpp:224:25: warning: cast from ‘sockaddr*’ to ‘sockaddr_in*’ increases required alignment of target type [-Wcast-align]
   ((struct sockaddr_in*)s)->sin_port = port;
                         ^
../tier1/NetAdr.cpp:225:25: warning: cast from ‘sockaddr*’ to ‘sockaddr_in*’ increases required alignment of target type [-Wcast-align]
   ((struct sockaddr_in*)s)->sin_addr.s_addr = INADDR_LOOPBACK ;
                         ^
../tier1/NetAdr.cpp: In member function ‘bool netadr_s::SetFromSockadr(const sockaddr*)’:
../tier1/NetAdr.cpp:234:12: warning: cast from ‘unsigned char (*)[4]’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *(int *)&ip = ((struct sockaddr_in *)s)->sin_addr.s_addr;
            ^~
../tier1/NetAdr.cpp:234:40: warning: cast from ‘const sockaddr*’ to ‘sockaddr_in*’ increases required alignment of target type [-Wcast-align]
   *(int *)&ip = ((struct sockaddr_in *)s)->sin_addr.s_addr;
                                        ^
../tier1/NetAdr.cpp:235:33: warning: cast from ‘const sockaddr*’ to ‘sockaddr_in*’ increases required alignment of target type [-Wcast-align]
   port = ((struct sockaddr_in *)s)->sin_port;
                                 ^
../tier1/NetAdr.cpp: In member function ‘bool netadr_s::SetFromString(const char*, bool)’:
../tier1/NetAdr.cpp:333:41: warning: cast from ‘char*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   SetIP( ntohl( *(int *)h->h_addr_list[0] ) );
                                         ^
../tier1/NetAdr.cpp: In member function ‘bool netadr_s::operator<(const netadr_t&) const’:
../tier1/NetAdr.cpp:352:24: warning: cast from ‘const unsigned char*’ to ‘uint*’ {aka ‘unsigned int*’} increases required alignment of target type [-Wcast-align]
  if ( *((uint *)netadr.ip) < *((uint *)ip) )
                        ^~
../tier1/NetAdr.cpp:352:40: warning: cast from ‘const unsigned char*’ to ‘uint*’ {aka ‘unsigned int*’} increases required alignment of target type [-Wcast-align]
  if ( *((uint *)netadr.ip) < *((uint *)ip) )
                                        ^~
../tier1/NetAdr.cpp:354:29: warning: cast from ‘const unsigned char*’ to ‘uint*’ {aka ‘unsigned int*’} increases required alignment of target type [-Wcast-align]
  else if ( *((uint *)netadr.ip) > *((uint *)ip) )
                             ^~
../tier1/NetAdr.cpp:354:45: warning: cast from ‘const unsigned char*’ to ‘uint*’ {aka ‘unsigned int*’} increases required alignment of target type [-Wcast-align]
  else if ( *((uint *)netadr.ip) > *((uint *)ip) )
                                             ^~

[  43/2160] Compiling tier1/mempool.cpp
In file included from ../public/tier1/utlvector.h:23,
                 from ../tier1/splitstring.cpp:8:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlvector.h:24,
                 from ../tier1/splitstring.cpp:8:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^

[  44/2160] Compiling tier1/lzss.cpp
In file included from ../public/mathlib/vector.h:32,
                 from ../public/mathlib/mathlib.h:14,
                 from ../public/tier1/utlmemory.h:20,
                 from ../public/tier1/utlstring.h:14,
                 from ../tier1/utlstring.cpp:10:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlstring.h:14,
                 from ../tier1/utlstring.cpp:10:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^

[  45/2160] Compiling tier1/lzmaDecoder.cpp
In file included from ../public/mathlib/vector.h:32,
                 from ../public/mathlib/mathlib.h:14,
                 from ../public/tier1/utlmemory.h:20,
                 from ../public/tier1/utlrbtree.h:12,
                 from ../public/tier1/utlmap.h:17,
                 from ../tier1/memstack.cpp:19:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlrbtree.h:12,
                 from ../public/tier1/utlmap.h:17,
                 from ../tier1/memstack.cpp:19:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
In file included from ../tier1/memstack.cpp:18:
../public/tier1/memstack.h: In constructor ‘CMemoryStack::CMemoryStack()’:
../public/tier1/memstack.h:54:8: warning: ‘CMemoryStack::m_pBase’ will be initialized after [-Wreorder]
  byte *m_pBase;
        ^~~~~~~
../public/tier1/memstack.h:50:8: warning:   ‘byte* CMemoryStack::m_pNextAlloc’ [-Wreorder]
  byte *m_pNextAlloc;
        ^~~~~~~~~~~~
../tier1/memstack.cpp:33:1: warning:   when initialized here [-Wreorder]
 CMemoryStack::CMemoryStack()
 ^~~~~~~~~~~~
In file included from ../tier1/memstack.cpp:18:
../public/tier1/memstack.h:52:8: warning: ‘CMemoryStack::m_pAllocLimit’ will be initialized after [-Wreorder]
  byte *m_pAllocLimit;
        ^~~~~~~~~~~~~
../public/tier1/memstack.h:51:8: warning:   ‘byte* CMemoryStack::m_pCommitLimit’ [-Wreorder]
  byte *m_pCommitLimit;
        ^~~~~~~~~~~~~~
../tier1/memstack.cpp:33:1: warning:   when initialized here [-Wreorder]
 CMemoryStack::CMemoryStack()
 ^~~~~~~~~~~~
In file included from ../tier1/memstack.cpp:18:
../public/tier1/memstack.h:57:11: warning: ‘CMemoryStack::m_alignment’ will be initialized after [-Wreorder]
  unsigned m_alignment;
           ^~~~~~~~~~~
../public/tier1/memstack.h:56:11: warning:   ‘unsigned int CMemoryStack::m_maxSize’ [-Wreorder]
  unsigned m_maxSize;
           ^~~~~~~~~
../tier1/memstack.cpp:33:1: warning:   when initialized here [-Wreorder]
 CMemoryStack::CMemoryStack()
 ^~~~~~~~~~~~

[  46/2160] Compiling tier1/keyvaluesjson.cpp
In file included from ../public/tier1/mempool.h:21,
                 from ../tier1/mempool.cpp:7:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
In file included from ../public/tier0/tslist.h:27,
                 from ../public/tier1/mempool.h:22,
                 from ../tier1/mempool.cpp:7:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
../tier1/mempool.cpp: In constructor ‘CUtlMemoryPool::CUtlMemoryPool(int, int, int, const char*, int)’:
../tier1/mempool.cpp:43:26: warning: comparison of integer expressions of different signedness: ‘int’ and ‘unsigned int’ [-Wsign-compare]
  m_BlockSize = blockSize < sizeof(void*) ? sizeof(void*) : blockSize;
                ~~~~~~~~~~^~~~~~~~~~~~~~~

[  47/2160] Compiling tier1/KeyValues.cpp
In file included from ../public/tier0/vprof.h:14,
                 from ../tier1/lzss.cpp:10:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../tier1/lzss.cpp:10:
../public/tier0/vprof.h: In constructor ‘CVProfNode::CVProfNode(const tchar*, int, CVProfNode*, const tchar*, int)’:
../public/tier0/vprof.h:390:11: warning: ‘CVProfNode::m_nPrevFrameCalls’ will be initialized after [-Wreorder]
  unsigned m_nPrevFrameCalls;
           ^~~~~~~~~~~~~~~~~
../public/tier0/vprof.h:385:8: warning:   ‘int CVProfNode::m_nRecursions’ [-Wreorder]
  int   m_nRecursions;
        ^~~~~~~~~~~~~
../public/tier0/vprof.h:778:8: warning:   when initialized here [-Wreorder]
 inline CVProfNode::CVProfNode( const tchar * pszName, int detailLevel, CVProfNode *pParent, const tchar *pBudgetGroupName, int budgetFlags )
        ^~~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlbuffer.h:17,
                 from ../tier1/lzss.cpp:13:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../tier1/lzss.cpp: In static member function ‘static bool CLZSS::IsCompressed(const unsigned char*)’:
../tier1/lzss.cpp:26:44: warning: cast from ‘const unsigned char*’ to ‘lzss_header_t*’ increases required alignment of target type [-Wcast-align]
  lzss_header_t *pHeader = (lzss_header_t *)pInput;
                                            ^~~~~~
../tier1/lzss.cpp: In static member function ‘static unsigned int CLZSS::GetActualSize(const unsigned char*)’:
../tier1/lzss.cpp:42:44: warning: cast from ‘const unsigned char*’ to ‘lzss_header_t*’ increases required alignment of target type [-Wcast-align]
  lzss_header_t *pHeader = (lzss_header_t *)pInput;
                                            ^~~~~~
../tier1/lzss.cpp: In member function ‘unsigned char* CLZSS::CompressNoAlloc(const unsigned char*, int, unsigned char*, unsigned int*)’:
../tier1/lzss.cpp:91:19: warning: comparison of integer expressions of different signedness: ‘int’ and ‘unsigned int’ [-Wsign-compare]
  if ( inputLength <= sizeof( lzss_header_t ) + 8 )
       ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../tier1/lzss.cpp:110:44: warning: cast from ‘unsigned char*’ to ‘lzss_header_t*’ increases required alignment of target type [-Wcast-align]
  lzss_header_t *pHeader = (lzss_header_t *)pStart;
                                            ^~~~~~

[  48/2160] Compiling tier1/interface.cpp
In file included from ../public/tier1/utlvector.h:23,
                 from ../public/tier1/convar.h:21,
                 from ../tier1/lzmaDecoder.cpp:24:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlvector.h:24,
                 from ../public/tier1/convar.h:21,
                 from ../tier1/lzmaDecoder.cpp:24:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../tier1/lzmaDecoder.cpp: In member function ‘CLZMAStream::eHeaderParse CLZMAStream::TryParseHeader(unsigned char*, unsigned int, unsigned int&)’:
../tier1/lzmaDecoder.cpp:350:66: warning: cast from ‘unsigned char*’ to ‘uint16*’ {aka ‘short unsigned int*’} increases required alignment of target type [-Wcast-align]
   uint16 nLZMAPropertiesSize = LittleWord( *(uint16 *)(pInput + 2) );
                                                                  ^

[  49/2160] Compiling tier1/ilocalize.cpp
In file included from ../tier1/interface.cpp:27:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier0/memdbgon.h:34,
                 from ../tier1/interface.cpp:44:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../tier1/interface.cpp: In function ‘CSysModule* Sys_LoadModule(const char*, Sys_Flags)’:
../tier1/interface.cpp:303:10: warning: unused variable ‘cCwd’ [-Wunused-variable]
   size_t cCwd = strlen( szCwd );
          ^~~~

[  50/2160] Compiling tier1/generichash.cpp
In file included from ../public/tier1/utlvector.h:23,
                 from ../public/tier1/KeyValues.h:25,
                 from ../public/tier1/keyvaluesjson.h:14,
                 from ../tier1/keyvaluesjson.cpp:7:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlvector.h:24,
                 from ../public/tier1/KeyValues.h:25,
                 from ../public/tier1/keyvaluesjson.h:14,
                 from ../tier1/keyvaluesjson.cpp:7:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
In file included from ../public/tier1/KeyValues.h:26,
                 from ../public/tier1/keyvaluesjson.h:14,
                 from ../tier1/keyvaluesjson.cpp:7:
../public/Color.h: In constructor ‘Color::Color()’:
../public/Color.h:25:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = 0;
            ^~~~
../public/Color.h: In member function ‘void Color::SetRawColor(int)’:
../public/Color.h:59:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = color32;
            ^~~~
../public/Color.h: In member function ‘int Color::GetRawColor() const’:
../public/Color.h:64:19: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return *((int *)this);
                   ^~~~
../public/Color.h: In member function ‘bool Color::operator==(const Color&) const’:
../public/Color.h:84:21: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                     ^~~~
../public/Color.h:84:40: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                                        ^~~

[  51/2160] Compiling tier1/diff.cpp
In file included from ../public/tier0/memdbgon.h:34,
                 from ../tier1/generichash.cpp:16:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../tier1/generichash.cpp: In function ‘uint32 MurmurHash2(const void*, int, uint32)’:
../tier1/generichash.cpp:331:38: warning: cast from ‘const unsigned char*’ to ‘uint32*’ {aka ‘unsigned int*’} increases required alignment of target type [-Wcast-align]
   uint32 k = LittleDWord( *(uint32 *)data );
                                      ^~~~

[  52/2160] Compiling tier1/datamanager.cpp
../tier1/ilocalize.cpp:12: warning: ignoring #pragma warning  [-Wunknown-pragmas]
 #pragma warning( disable: 4018 ) // '<' : signed/unsigned mismatch
 
In file included from ../public/tier1/utlvector.h:23,
                 from ../public/tier1/KeyValues.h:25,
                 from ../public/tier1/ilocalize.h:17,
                 from ../tier1/ilocalize.cpp:9:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlvector.h:24,
                 from ../public/tier1/KeyValues.h:25,
                 from ../public/tier1/ilocalize.h:17,
                 from ../tier1/ilocalize.cpp:9:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
In file included from ../public/tier1/KeyValues.h:26,
                 from ../public/tier1/ilocalize.h:17,
                 from ../tier1/ilocalize.cpp:9:
../public/Color.h: In constructor ‘Color::Color()’:
../public/Color.h:25:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = 0;
            ^~~~
../public/Color.h: In member function ‘void Color::SetRawColor(int)’:
../public/Color.h:59:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = color32;
            ^~~~
../public/Color.h: In member function ‘int Color::GetRawColor() const’:
../public/Color.h:64:19: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return *((int *)this);
                   ^~~~
../public/Color.h: In member function ‘bool Color::operator==(const Color&) const’:
../public/Color.h:84:21: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                     ^~~~
../public/Color.h:84:40: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                                        ^~~

[  53/2160] Compiling tier1/convar.cpp
In file included from ../public/mathlib/vector.h:32,
                 from ../public/mathlib/mathlib.h:14,
                 from ../tier1/diff.cpp:11:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier0/memdbgon.h:34,
                 from ../tier1/diff.cpp:14:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../tier1/diff.cpp: In function ‘int FindDiffs(const uint8*, const uint8*, int, int, int&, uint8*, uint32)’:
../tier1/diff.cpp:329:39: warning: cast from ‘const uint8*’ {aka ‘const unsigned char*’} to ‘const uint16*’ {aka ‘const short unsigned int*’} increases required alignment of target type [-Wcast-align]
       uint16 hash1=*((uint16 const *) walk)+*((uint16 const *) walk+2);
                                       ^~~~
../tier1/diff.cpp:329:64: warning: cast from ‘const uint8*’ {aka ‘const unsigned char*’} to ‘const uint16*’ {aka ‘const short unsigned int*’} increases required alignment of target type [-Wcast-align]
       uint16 hash1=*((uint16 const *) walk)+*((uint16 const *) walk+2);
                                                                ^~~~
../tier1/diff.cpp:350:39: warning: cast from ‘const uint8*’ {aka ‘const unsigned char*’} to ‘const uint16*’ {aka ‘const short unsigned int*’} increases required alignment of target type [-Wcast-align]
       uint16 hash1=*((uint16 const *) walk)+*((uint16 const *) walk+2);
                                       ^~~~
../tier1/diff.cpp:350:64: warning: cast from ‘const uint8*’ {aka ‘const unsigned char*’} to ‘const uint16*’ {aka ‘const short unsigned int*’} increases required alignment of target type [-Wcast-align]
       uint16 hash1=*((uint16 const *) walk)+*((uint16 const *) walk+2);
                                                                ^~~~

[  54/2160] Compiling tier1/commandbuffer.cpp
In file included from ../public/tier1/datamanager.h:13,
                 from ../tier1/datamanager.cpp:10:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utllinkedlist.h:17,
                 from ../public/tier1/utlmultilist.h:16,
                 from ../public/tier1/datamanager.h:14,
                 from ../tier1/datamanager.cpp:10:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^

[  55/2160] Compiling tier1/checksum_sha1.cpp
../tier1/KeyValues.cpp:537: warning: ignoring #pragma warning  [-Wunknown-pragmas]
 #pragma warning (disable:4706)
 
../tier1/KeyValues.cpp:621: warning: ignoring #pragma warning  [-Wunknown-pragmas]
 #pragma warning (default:4706)
 
In file included from ../public/tier1/utlvector.h:23,
                 from ../public/tier1/KeyValues.h:25,
                 from ../tier1/KeyValues.cpp:18:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlvector.h:24,
                 from ../public/tier1/KeyValues.h:25,
                 from ../tier1/KeyValues.cpp:18:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
In file included from ../public/tier1/KeyValues.h:26,
                 from ../tier1/KeyValues.cpp:18:
../public/Color.h: In constructor ‘Color::Color()’:
../public/Color.h:25:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = 0;
            ^~~~
../public/Color.h: In member function ‘void Color::SetRawColor(int)’:
../public/Color.h:59:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = color32;
            ^~~~
../public/Color.h: In member function ‘int Color::GetRawColor() const’:
../public/Color.h:64:19: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return *((int *)this);
                   ^~~~
../public/Color.h: In member function ‘bool Color::operator==(const Color&) const’:
../public/Color.h:84:21: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                     ^~~~
../public/Color.h:84:40: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                                        ^~~
../tier1/KeyValues.cpp: In constructor ‘CKeyValuesGrowableStringTable::CKeyValuesGrowableStringTable()’:
../tier1/KeyValues.cpp:317:19: warning: ‘CKeyValuesGrowableStringTable::m_vecStrings’ will be initialized after [-Wreorder]
  CUtlVector<char> m_vecStrings;
                   ^~~~~~~~~~~~
../tier1/KeyValues.cpp:316:52: warning:   ‘CUtlHash<int, CKeyValuesGrowableStringTable::CLookupFunctor&, CKeyValuesGrowableStringTable::CLookupFunctor&> CKeyValuesGrowableStringTable::m_hashLookup’ [-Wreorder]
  CUtlHash<int, CLookupFunctor &, CLookupFunctor &> m_hashLookup;
                                                    ^~~~~~~~~~~~
../tier1/KeyValues.cpp:233:2: warning:   when initialized here [-Wreorder]
  CKeyValuesGrowableStringTable() :
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../tier1/KeyValues.cpp: In member function ‘void KeyValues::SaveKeyToFile(KeyValues*, IBaseFileSystem*, FileHandle_t, CUtlBuffer*, int, bool, bool)’:
../tier1/KeyValues.cpp:938:68: warning: cast from ‘char*’ to ‘uint64*’ {aka ‘long long unsigned int*’} increases required alignment of target type [-Wcast-align]
     Q_snprintf( buf, sizeof( buf ), "0x%016llX", *( (uint64 *)dat->m_sValue ) );
                                                                    ^~~~~~~~
../tier1/KeyValues.cpp: In member function ‘uint64 KeyValues::GetUint64(const char*, uint64)’:
../tier1/KeyValues.cpp:1340:28: warning: cast from ‘char*’ to ‘uint64*’ {aka ‘long long unsigned int*’} increases required alignment of target type [-Wcast-align]
    return *((uint64 *)dat->m_sValue);
                            ^~~~~~~~
../tier1/KeyValues.cpp: In member function ‘float KeyValues::GetFloat(const char*, float)’:
../tier1/KeyValues.cpp:1401:36: warning: cast from ‘char*’ to ‘uint64*’ {aka ‘long long unsigned int*’} increases required alignment of target type [-Wcast-align]
    return (float)(*((uint64 *)dat->m_sValue));
                                    ^~~~~~~~
../tier1/KeyValues.cpp: In member function ‘const char* KeyValues::GetString(const char*, const char*)’:
../tier1/KeyValues.cpp:1436:70: warning: cast from ‘char*’ to ‘uint64*’ {aka ‘long long unsigned int*’} increases required alignment of target type [-Wcast-align]
    Q_snprintf( buf, sizeof( buf ), "%lld", *((uint64 *)(dat->m_sValue)) );
                                                                      ^
../tier1/KeyValues.cpp: In member function ‘const wchar_t* KeyValues::GetWString(const char*, const wchar_t*)’:
../tier1/KeyValues.cpp:1490:75: warning: cast from ‘char*’ to ‘uint64*’ {aka ‘long long unsigned int*’} increases required alignment of target type [-Wcast-align]
     swprintf( wbuf, Q_ARRAYSIZE(wbuf), L"%lld", *((uint64 *)(dat->m_sValue)) );
                                                                           ^
../tier1/KeyValues.cpp: In member function ‘bool KeyValues::GetBool(const char*, bool, bool*)’:
../tier1/KeyValues.cpp:1535:5: warning: this ‘if’ clause does not guard... [-Wmisleading-indentation]
     if ( optGotDefault )
     ^~
../tier1/KeyValues.cpp:1538:2: note: ...this statement, but the latter is misleadingly indented as if it were guarded by the ‘if’
  return defaultValue;
  ^~~~~~
../tier1/KeyValues.cpp: In member function ‘void KeyValues::SetUint64(const char*, uint64)’:
../tier1/KeyValues.cpp:1712:20: warning: cast from ‘char*’ to ‘uint64*’ {aka ‘long long unsigned int*’} increases required alignment of target type [-Wcast-align]
   *((uint64 *)dat->m_sValue) = value;
                    ^~~~~~~~
../tier1/KeyValues.cpp: In member function ‘bool KeyValues::LoadFromBuffer(const char*, const char*, IBaseFileSystem*, const char*)’:
../tier1/KeyValues.cpp:2372:55: warning: cast from ‘const char*’ to ‘wchar_t*’ increases required alignment of target type [-Wcast-align]
   int nUTF8Len = V_UnicodeToUTF8( (wchar_t*)(pBuffer+2), NULL, 0 );
                                                       ^
../tier1/KeyValues.cpp:2374:40: warning: cast from ‘const char*’ to ‘wchar_t*’ increases required alignment of target type [-Wcast-align]
   V_UnicodeToUTF8( (wchar_t*)(pBuffer+2), pUTF8Buf, nUTF8Len );
                                        ^
../tier1/KeyValues.cpp: In member function ‘void KeyValues::RecursiveLoadFromBuffer(const char*, CUtlBuffer&)’:
../tier1/KeyValues.cpp:2519:22: warning: cast from ‘char*’ to ‘uint64*’ {aka ‘long long unsigned int*’} increases required alignment of target type [-Wcast-align]
     *((uint64 *)dat->m_sValue) = retVal;
                      ^~~~~~~~
../tier1/KeyValues.cpp: In member function ‘bool KeyValues::WriteAsBinary(CUtlBuffer&)’:
../tier1/KeyValues.cpp:2639:40: warning: cast from ‘char*’ to ‘double*’ increases required alignment of target type [-Wcast-align]
     buffer.PutDouble( *((double *)dat->m_sValue) );
                                        ^~~~~~~~
../tier1/KeyValues.cpp: In member function ‘bool KeyValues::ReadAsBinary(CUtlBuffer&, int)’:
../tier1/KeyValues.cpp:2743:22: warning: cast from ‘char*’ to ‘uint64*’ {aka ‘long long unsigned int*’} increases required alignment of target type [-Wcast-align]
     *((uint64 *)dat->m_sValue) = buffer.GetInt64();
                      ^~~~~~~~
../tier1/KeyValues.cpp: In member function ‘void KeyValues::UnpackIntoStructure(const KeyValuesUnpackStructure*, void*, size_t)’:
../tier1/KeyValues.cpp:2842:19: warning: cast from ‘uint8*’ {aka ‘unsigned char*’} to ‘float*’ increases required alignment of target type [-Wcast-align]
     *( ( float *) dest_field)=GetFloat( pUnpackTable->m_pKeyName, default_value );
                   ^~~~~~~~~~
../tier1/KeyValues.cpp:2851:31: warning: cast from ‘uint8*’ {aka ‘unsigned char*’} to ‘Vector*’ increases required alignment of target type [-Wcast-align]
     Vector *dest_v=(Vector *) dest_field;
                               ^~~~~~~~~~
../tier1/KeyValues.cpp:2865:29: warning: cast from ‘uint8*’ {aka ‘unsigned char*’} to ‘float*’ increases required alignment of target type [-Wcast-align]
     float *dest_f=(float *) dest_field;
                             ^~~~~~~~~~
../tier1/KeyValues.cpp:2879:29: warning: cast from ‘uint8*’ {aka ‘unsigned char*’} to ‘float*’ increases required alignment of target type [-Wcast-align]
     float *dest_f=(float *) dest_field;
                             ^~~~~~~~~~
../tier1/KeyValues.cpp:2905:25: warning: cast from ‘uint8*’ {aka ‘unsigned char*’} to ‘int*’ increases required alignment of target type [-Wcast-align]
     int *dest_i=(int *) dest_field;
                         ^~~~~~~~~~
../tier1/KeyValues.cpp:2917:31: warning: cast from ‘uint8*’ {aka ‘unsigned char*’} to ‘Vector*’ increases required alignment of target type [-Wcast-align]
     Vector *dest_v=(Vector *) dest_field;
                               ^~~~~~~~~~
In file included from ../public/tier1/utlsymbol.h:17,
                 from ../public/filesystem.h:17,
                 from ../tier1/KeyValues.cpp:19:
../public/tier1/utlrbtree.h: In instantiation of ‘CUtlRBTree<T, I, L, M>::CUtlRBTree(int, int, const LessFunc_t&) [with T = CUtlSymbolTable::CStringPoolIndex; I = short unsigned int; L = CUtlSymbolTable::CLess; M = CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, short unsigned int>, short unsigned int>; CUtlRBTree<T, I, L, M>::LessFunc_t = CUtlSymbolTable::CLess]’:
../public/tier1/utlsymbol.h:149:114:   required from here
../public/tier1/utlrbtree.h:300:4: warning: ‘CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, short unsigned int, CUtlSymbolTable::CLess>::m_Elements’ will be initialized after [-Wreorder]
  M m_Elements;
    ^~~~~~~~~~
../public/tier1/utlrbtree.h:298:13: warning:   ‘CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, short unsigned int, CUtlSymbolTable::CLess>::LessFunc_t CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, short unsigned int, CUtlSymbolTable::CLess>::m_LessFunc’ [-Wreorder]
  LessFunc_t m_LessFunc;
             ^~~~~~~~~~
../public/tier1/utlrbtree.h:378:8: warning:   when initialized here [-Wreorder]
 inline CUtlRBTree<T, I, L, M>::CUtlRBTree( int growSize, int initSize, const LessFunc_t &lessfunc ) :
        ^~~~~~~~~~~~~~~~~~~~~~
In file included from ../tier1/KeyValues.cpp:31:
../public/tier1/UtlSortVector.h: In instantiation of ‘CUtlSortVector<T, LessFunc, BaseVector>::CUtlSortVector(int, int) [with T = KeyValues*; LessFunc = CUtlSortVectorKeyValuesByName; BaseVector = CUtlVector<KeyValues*>]’:
../tier1/KeyValues.cpp:838:63:   required from here
../public/tier1/UtlSortVector.h:137:8: warning: ‘CUtlSortVector<KeyValues*, CUtlSortVectorKeyValuesByName>::m_pLessContext’ will be initialized after [-Wreorder]
  void *m_pLessContext;
        ^~~~~~~~~~~~~~
../public/tier1/UtlSortVector.h:153:79: warning:   base ‘CUtlVector<KeyValues*>’ [-Wreorder]
  m_pLessContext(NULL), BaseVector( nGrowSize, initSize ), m_bNeedsSort( false )
                                                                               ^
../public/tier1/UtlSortVector.h:152:1: warning:   when initialized here [-Wreorder]
 CUtlSortVector<T, LessFunc, BaseVector>::CUtlSortVector( int nGrowSize, int initSize ) :
 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../tier1/KeyValues.cpp:30:
../public/tier1/utlqueue.h: In instantiation of ‘QueueIter_t CUtlQueue<T, M>::Next_Unchecked(QueueIter_t) const [with T = KeyValues::CopyKeyValuesFromRecursive(const KeyValues&)::CopyStruct; M = CUtlMemory<KeyValues::CopyKeyValuesFromRecursive(const KeyValues&)::CopyStruct, int>]’:
../public/tier1/utlqueue.h:211:26:   required from ‘void CUtlQueue<T, M>::Insert(const T&) [with T = KeyValues::CopyKeyValuesFromRecursive(const KeyValues&)::CopyStruct; M = CUtlMemory<KeyValues::CopyKeyValuesFromRecursive(const KeyValues&)::CopyStruct, int>]’
../tier1/KeyValues.cpp:1770:33:   required from here
../public/tier1/utlqueue.h:295:12: warning: comparison of integer expressions of different signedness: ‘unsigned int’ and ‘int’ [-Wsign-compare]
  return it == m_memory.Count() - 1 ? QueueIter_t( 0 ) : QueueIter_t( it + 1 );
         ~~~^~~~~~~~~~~~~~~~~~~~~~~
../tier1/KeyValues.cpp: In member function ‘bool KeyValues::Dump(IKeyValuesDumpContext*, int, bool)’:
../tier1/KeyValues.cpp:3047:31: warning: nonnull argument ‘this’ compared to NULL [-Wnonnull-compare]
   for ( KeyValues *sub = this ? GetFirstTrueSubKey() : NULL; sub; sub = sub->GetNextTrueSubKey() )
                               ^
../tier1/KeyValues.cpp:3040:31: warning: nonnull argument ‘this’ compared to NULL [-Wnonnull-compare]
   for ( KeyValues *val = this ? GetFirstValue() : NULL; val; val = val->GetNextValue() )
                               ^
../tier1/KeyValues.cpp:3025:31: warning: nonnull argument ‘this’ compared to NULL [-Wnonnull-compare]
   for ( KeyValues *sub = this ? GetFirstTrueSubKey() : NULL; sub; sub = sub->GetNextTrueSubKey() )
                               ^
../tier1/KeyValues.cpp:3010:31: warning: nonnull argument ‘this’ compared to NULL [-Wnonnull-compare]
   for ( KeyValues *val = this ? GetFirstValue() : NULL; val; val = val->GetNextValue() )
                               ^

[  56/2160] Compiling tier1/checksum_md5.cpp
In file included from ../public/tier1/utlvector.h:23,
                 from ../public/tier1/convar.h:21,
                 from ../tier1/convar.cpp:13:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlvector.h:24,
                 from ../public/tier1/convar.h:21,
                 from ../tier1/convar.cpp:13:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
In file included from ../tier1/convar.cpp:21:
../public/Color.h: In constructor ‘Color::Color()’:
../public/Color.h:25:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = 0;
            ^~~~
../public/Color.h: In member function ‘void Color::SetRawColor(int)’:
../public/Color.h:59:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = color32;
            ^~~~
../public/Color.h: In member function ‘int Color::GetRawColor() const’:
../public/Color.h:64:19: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return *((int *)this);
                   ^~~~
../public/Color.h: In member function ‘bool Color::operator==(const Color&) const’:
../public/Color.h:84:21: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                     ^~~~
../public/Color.h:84:40: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                                        ^~~
../tier1/convar.cpp: In member function ‘virtual void ConVar::ChangeStringValue(const char*, float)’:
../tier1/convar.cpp:841:26: warning: statement has no effect [-Wunused-value]
  stackfree( pszOldValue );
                          ^

[  57/2160] Compiling tier1/checksum_crc.cpp
../tier1/checksum_sha1.cpp: In constructor ‘CSHA1::CSHA1()’:
../tier1/checksum_sha1.cpp:64:36: warning: cast from ‘unsigned char*’ to ‘SHA1_WORKSPACE_BLOCK*’ increases required alignment of target type [-Wcast-align]
  m_block = (SHA1_WORKSPACE_BLOCK *)m_workspace;
                                    ^~~~~~~~~~~

[  58/2160] Compiling tier1/characterset.cpp
In file included from ../public/mathlib/vector.h:32,
                 from ../public/mathlib/mathlib.h:14,
                 from ../public/tier1/utlmemory.h:20,
                 from ../public/tier1/utllinkedlist.h:17,
                 from ../public/tier1/CommandBuffer.h:18,
                 from ../tier1/commandbuffer.cpp:10:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utllinkedlist.h:17,
                 from ../public/tier1/CommandBuffer.h:18,
                 from ../tier1/commandbuffer.cpp:10:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^

[  59/2160] Compiling tier1/byteswap.cpp
In file included from ../public/tier0/memdbgon.h:34,
                 from ../tier1/checksum_crc.cpp:12:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../tier1/checksum_crc.cpp: In function ‘void CRC32_ProcessBuffer(CRC32_t*, const void*, int)’:
../tier1/checksum_crc.cpp:122:42: warning: cast from ‘unsigned char*’ to ‘CRC32_t*’ {aka ‘unsigned int*’} increases required alignment of target type [-Wcast-align]
         ulCrc ^= LittleLong( *(CRC32_t *)pb );
                                          ^~
../tier1/checksum_crc.cpp:165:42: warning: cast from ‘unsigned char*’ to ‘CRC32_t*’ {aka ‘unsigned int*’} increases required alignment of target type [-Wcast-align]
         ulCrc ^= LittleLong( *(CRC32_t *)pb );
                                          ^~
../tier1/checksum_crc.cpp:170:49: warning: cast from ‘unsigned char*’ to ‘CRC32_t*’ {aka ‘unsigned int*’} increases required alignment of target type [-Wcast-align]
         ulCrc ^= LittleLong( *(CRC32_t *)(pb + 4) );
                                                 ^

[  60/2160] Compiling tier1/bitbuf.cpp
In file included from ../public/tier0/memdbgon.h:34,
                 from ../tier1/checksum_md5.cpp:16:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../tier1/checksum_md5.cpp: In function ‘void MD5Update(MD5Context_t*, const unsigned char*, unsigned int)’:
../tier1/checksum_md5.cpp:169:54: warning: cast from ‘unsigned char*’ to ‘unsigned int*’ increases required alignment of target type [-Wcast-align]
         MD5Transform(ctx->buf, (unsigned int *) ctx->in);
                                                      ^~
../tier1/checksum_md5.cpp:179:54: warning: cast from ‘unsigned char*’ to ‘unsigned int*’ increases required alignment of target type [-Wcast-align]
         MD5Transform(ctx->buf, (unsigned int *) ctx->in);
                                                      ^~
../tier1/checksum_md5.cpp: In function ‘void MD5Final(unsigned char*, MD5Context_t*)’:
../tier1/checksum_md5.cpp:216:54: warning: cast from ‘unsigned char*’ to ‘unsigned int*’ increases required alignment of target type [-Wcast-align]
         MD5Transform(ctx->buf, (unsigned int *) ctx->in);
                                                      ^~
../tier1/checksum_md5.cpp:229:28: warning: cast from ‘unsigned char*’ to ‘unsigned int*’ increases required alignment of target type [-Wcast-align]
     ((unsigned int *) ctx->in)[14] = ctx->bits[0];
                            ^~
../tier1/checksum_md5.cpp:230:28: warning: cast from ‘unsigned char*’ to ‘unsigned int*’ increases required alignment of target type [-Wcast-align]
     ((unsigned int *) ctx->in)[15] = ctx->bits[1];
                            ^~
../tier1/checksum_md5.cpp:232:50: warning: cast from ‘unsigned char*’ to ‘unsigned int*’ increases required alignment of target type [-Wcast-align]
     MD5Transform(ctx->buf, (unsigned int *) ctx->in);
                                                  ^~
../tier1/checksum_md5.cpp: In function ‘unsigned int MD5_PseudoRandom(unsigned int)’:
../tier1/checksum_md5.cpp:270:34: warning: cast from ‘unsigned char*’ to ‘unsigned int*’ increases required alignment of target type [-Wcast-align]
  return *(unsigned int*)(digest+6); // use 4 middle bytes for random value
                                  ^
../tier1/checksum_md5.cpp: In member function ‘bool MD5Value_t::IsZero() const’:
../tier1/checksum_md5.cpp:288:22: warning: comparison of integer expressions of different signedness: ‘int’ and ‘unsigned int’ [-Wsign-compare]
  for ( int i = 0 ; i < Q_ARRAYSIZE( bits ) ; ++i )

[  61/2160] Compiling utils/lzma/C/LzmaDec.c
In file included from ../public/tier0/memdbgon.h:34,
                 from ../tier1/characterset.cpp:18:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^

[  62/2160] Compiling tier1/newbitbuf.cpp
[  63/2160] Compiling tier1/kvpacker.cpp
In file included from ../public/mathlib/vector.h:32,
                 from ../public/datamap.h:15,
                 from ../public/tier1/byteswap.h:13,
                 from ../tier1/byteswap.cpp:8:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlvector.h:24,
                 from ../public/datamap.h:18,
                 from ../public/tier1/byteswap.h:13,
                 from ../tier1/byteswap.cpp:8:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^

[  64/2160] Compiling tier1/utlbuffer.cpp
In file included from ../public/mathlib/vector.h:32,
                 from ../public/mathlib/mathlib.h:14,
                 from ../public/tier1/bitbuf.h:19,
                 from ../tier1/newbitbuf.cpp:9:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../tier1/newbitbuf.cpp:9:
../public/tier1/bitbuf.h: In member function ‘unsigned int bf_read::ReadUBitLong(int)’:
../public/tier1/bitbuf.h:794:63: warning: cast from ‘const unsigned char*’ to ‘long unsigned int*’ increases required alignment of target type [-Wcast-align]
  unsigned int dw1 = LoadLittleDWord( (unsigned long* RESTRICT)m_pData, iWordOffset1 ) >> iStartBit;
                                                               ^~~~~~~
../public/tier1/bitbuf.h:795:63: warning: cast from ‘const unsigned char*’ to ‘long unsigned int*’ increases required alignment of target type [-Wcast-align]
  unsigned int dw2 = LoadLittleDWord( (unsigned long* RESTRICT)m_pData, iWordOffset2 ) << (32 - iStartBit);
                                                               ^~~~~~~
In file included from ../public/tier0/memdbgon.h:34,
                 from ../public/bitvec.h:1298,
                 from ../tier1/newbitbuf.cpp:14:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^

[  65/2160] Compiling tier1/uniqueid.cpp
In file included from ../public/tier1/utlvector.h:23,
                 from ../public/tier1/KeyValues.h:25,
                 from ../tier1/kvpacker.cpp:9:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlvector.h:24,
                 from ../public/tier1/KeyValues.h:25,
                 from ../tier1/kvpacker.cpp:9:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
In file included from ../public/tier1/KeyValues.h:26,
                 from ../tier1/kvpacker.cpp:9:
../public/Color.h: In constructor ‘Color::Color()’:
../public/Color.h:25:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = 0;
            ^~~~
../public/Color.h: In member function ‘void Color::SetRawColor(int)’:
../public/Color.h:59:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = color32;
            ^~~~
../public/Color.h: In member function ‘int Color::GetRawColor() const’:
../public/Color.h:64:19: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return *((int *)this);
                   ^~~~
../public/Color.h: In member function ‘bool Color::operator==(const Color&) const’:
../public/Color.h:84:21: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                     ^~~~
../public/Color.h:84:40: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                                        ^~~

[  66/2160] Compiling tier1/utlbinaryblock.cpp
In file included from ../public/mathlib/vector.h:32,
                 from ../public/mathlib/mathlib.h:14,
                 from ../public/tier1/bitbuf.h:19,
                 from ../tier1/bitbuf.cpp:9:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../tier1/bitbuf.cpp:9:
../public/tier1/bitbuf.h: In member function ‘unsigned int bf_read::ReadUBitLong(int)’:
../public/tier1/bitbuf.h:794:63: warning: cast from ‘const unsigned char*’ to ‘long unsigned int*’ increases required alignment of target type [-Wcast-align]
  unsigned int dw1 = LoadLittleDWord( (unsigned long* RESTRICT)m_pData, iWordOffset1 ) >> iStartBit;
                                                               ^~~~~~~
../public/tier1/bitbuf.h:795:63: warning: cast from ‘const unsigned char*’ to ‘long unsigned int*’ increases required alignment of target type [-Wcast-align]
  unsigned int dw2 = LoadLittleDWord( (unsigned long* RESTRICT)m_pData, iWordOffset2 ) << (32 - iStartBit);
                                                               ^~~~~~~
In file included from ../public/tier0/memdbgon.h:34,
                 from ../public/bitvec.h:1298,
                 from ../tier1/bitbuf.cpp:14:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../tier1/bitbuf.cpp: In member function ‘bool bf_write::WriteBits(const void*, int)’:
../tier1/bitbuf.cpp:498:45: warning: cast from ‘unsigned char*’ to ‘long unsigned int*’ increases required alignment of target type [-Wcast-align]
    unsigned long curData = *(unsigned long*)pOut;
                                             ^~~~
../tier1/bitbuf.cpp: In member function ‘void bf_read::ReadBits(void*, int)’:
../tier1/bitbuf.cpp:901:22: warning: cast from ‘unsigned char*’ to ‘long unsigned int*’ increases required alignment of target type [-Wcast-align]
    *((unsigned long*)pOut) = ReadUBitLong(32);
                      ^~~~
../tier1/bitbuf.cpp: In member function ‘int bf_read::CompareBitsAt(int, bf_read*, int, int)’:
../tier1/bitbuf.cpp:1465:42: warning: cast from ‘const unsigned char*’ to ‘long unsigned int*’ increases required alignment of target type [-Wcast-align]
  unsigned long *pData1 = (unsigned long*)m_pData + (offset >> 5);
                                          ^~~~~~~
../tier1/bitbuf.cpp:1466:49: warning: cast from ‘const unsigned char*’ to ‘long unsigned int*’ increases required alignment of target type [-Wcast-align]
  unsigned long *pData2 = (unsigned long*)other->m_pData + (otherOffset >> 5);
                                                 ^~~~~~~

[  67/2160] Compiling tier1/reliabletimer.cpp
../tier1/utlbuffer.cpp:9: warning: ignoring #pragma warning  [-Wunknown-pragmas]
 #pragma warning (disable : 4514)
 
../tier1/utlbuffer.cpp:908: warning: ignoring #pragma warning  [-Wunknown-pragmas]
 #pragma warning ( disable : 4706 )
 
../tier1/utlbuffer.cpp:1079: warning: ignoring #pragma warning  [-Wunknown-pragmas]
 #pragma warning ( default : 4706 )
 
In file included from ../public/mathlib/vector.h:32,
                 from ../public/mathlib/mathlib.h:14,
                 from ../public/tier1/utlmemory.h:20,
                 from ../public/tier1/utlbuffer.h:17,
                 from ../tier1/utlbuffer.cpp:11:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlbuffer.h:17,
                 from ../tier1/utlbuffer.cpp:11:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^

[  68/2160] Compiling tier1/strtools.cpp
In file included from ../public/tier1/utlvector.h:23,
                 from ../public/tier1/uniqueid.h:17,
                 from ../tier1/uniqueid.cpp:17:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlvector.h:24,
                 from ../public/tier1/uniqueid.h:17,
                 from ../tier1/uniqueid.cpp:17:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^

[  69/2160] Compiling tier1/snappy-stubs-internal.cpp
In file included from ../public/mathlib/vector.h:32,
                 from ../public/mathlib/mathlib.h:14,
                 from ../public/tier1/utlmemory.h:20,
                 from ../public/tier1/utlbinaryblock.h:13,
                 from ../tier1/utlbinaryblock.cpp:7:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlbinaryblock.h:13,
                 from ../tier1/utlbinaryblock.cpp:7:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^

[  70/2160] Compiling tier1/strtools_unicode.cpp
In file included from ../public/tier1/utlvector.h:23,
                 from ../public/tier1/convar.h:21,
                 from ../public/tier1/tier1.h:16,
                 from ../public/tier1/reliabletimer.h:13,
                 from ../tier1/reliabletimer.cpp:7:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlvector.h:24,
                 from ../public/tier1/convar.h:21,
                 from ../public/tier1/tier1.h:16,
                 from ../public/tier1/reliabletimer.h:13,
                 from ../tier1/reliabletimer.cpp:7:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^

[  71/2160] Compiling tier1/tier1.cpp
[  72/2160] Compiling tier1/sparsematrix.cpp
[  73/2160] Compiling tier1/stringpool.cpp
In file included from ../public/tier1/utlvector.h:23,
                 from ../public/tier1/convar.h:21,
                 from ../public/tier1/tier1.h:16,
                 from ../tier1/tier1.cpp:7:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlvector.h:24,
                 from ../public/tier1/convar.h:21,
                 from ../public/tier1/tier1.h:16,
                 from ../tier1/tier1.cpp:7:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^

[  74/2160] Compiling public/tier0/memoverride.cpp
In file included from ../public/tier0/memoverride.cpp:35:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^

[  75/2160] Compiling vstdlib/osversion.cpp
../tier1/strtools.cpp:3229: warning: ignoring #pragma warning  [-Wunknown-pragmas]
 #pragma warning( push )
 
../tier1/strtools.cpp:3230: warning: ignoring #pragma warning  [-Wunknown-pragmas]
 #pragma warning( disable : 4428 ) // universal-character-name encountered in source
 
In file included from ../public/mathlib/vector.h:32,
                 from ../public/mathlib/mathlib.h:14,
                 from ../public/tier1/utlmemory.h:20,
                 from ../public/tier1/utlrbtree.h:12,
                 from ../public/tier1/utlmap.h:17,
                 from ../public/tier1/utldict.h:17,
                 from ../tier1/strtools.cpp:74:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlrbtree.h:12,
                 from ../public/tier1/utlmap.h:17,
                 from ../public/tier1/utldict.h:17,
                 from ../tier1/strtools.cpp:74:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../tier1/strtools.cpp: In function ‘bool V_BBCodeToHTML(char*, int, const char*, int)’:
../tier1/strtools.cpp:3533:23: warning: comparison of integer expressions of different signedness: ‘int’ and ‘unsigned int’ [-Wsign-compare]
    for ( int r = 0; r < ARRAYSIZE( g_pszSimpleBBCodeReplacements ); r += 2 )
In file included from ../public/tier1/utlmap.h:17,
                 from ../public/tier1/utldict.h:17,
                 from ../tier1/strtools.cpp:74:
../public/tier1/utlrbtree.h: In instantiation of ‘CUtlRBTree<T, I, L, M>::CUtlRBTree(int, int, const LessFunc_t&) [with T = CUtlSymbolTable::CStringPoolIndex; I = short unsigned int; L = CUtlSymbolTable::CLess; M = CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, short unsigned int>, short unsigned int>; CUtlRBTree<T, I, L, M>::LessFunc_t = CUtlSymbolTable::CLess]’:
../public/tier1/utlsymbol.h:149:114:   required from here
../public/tier1/utlrbtree.h:300:4: warning: ‘CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, short unsigned int, CUtlSymbolTable::CLess>::m_Elements’ will be initialized after [-Wreorder]
  M m_Elements;
    ^~~~~~~~~~
../public/tier1/utlrbtree.h:298:13: warning:   ‘CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, short unsigned int, CUtlSymbolTable::CLess>::LessFunc_t CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, short unsigned int, CUtlSymbolTable::CLess>::m_LessFunc’ [-Wreorder]
  LessFunc_t m_LessFunc;
             ^~~~~~~~~~
../public/tier1/utlrbtree.h:378:8: warning:   when initialized here [-Wreorder]
 inline CUtlRBTree<T, I, L, M>::CUtlRBTree( int growSize, int initSize, const LessFunc_t &lessfunc ) :
        ^~~~~~~~~~~~~~~~~~~~~~

[  76/2160] Compiling vstdlib/vcover.cpp
In file included from ../public/tier1/utlvector.h:23,
                 from ../public/tier1/sparsematrix.h:11,
                 from ../tier1/sparsematrix.cpp:5:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlvector.h:24,
                 from ../public/tier1/sparsematrix.h:11,
                 from ../tier1/sparsematrix.cpp:5:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^

[  77/2160] Compiling vstdlib/random.cpp
../vstdlib/osversion.cpp: In function ‘const char* GetOSDetailString(char*, int)’:
../vstdlib/osversion.cpp:232:20: warning: comparison of integer expressions of different signedness: ‘int’ and ‘unsigned int’ [-Wsign-compare]
  for (int i = 0; i < Q_ARRAYSIZE( pszIssueFile ); i++ )
../vstdlib/osversion.cpp: In function ‘EOSType GetOSTypeFromString_Deprecated(const char*)’:
../vstdlib/osversion.cpp:382:25: warning: comparison of integer expressions of different signedness: ‘int’ and ‘unsigned int’ [-Wsign-compare]
  for ( int iOS = 0; iOS < Q_ARRAYSIZE( k_rgOSTypeToName ) ; iOS++ )

[  78/2160] Compiling vstdlib/cvar.cpp
In file included from ../public/tier1/utlvector.h:23,
                 from ../public/tier1/convar.h:21,
                 from ../tier1/stringpool.cpp:8:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlvector.h:24,
                 from ../public/tier1/convar.h:21,
                 from ../tier1/stringpool.cpp:8:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
In file included from ../public/tier1/stringpool.h:15,
                 from ../tier1/stringpool.cpp:10:
../public/tier1/utlrbtree.h: In instantiation of ‘CUtlRBTree<T, I, L, M>::CUtlRBTree(int, int, const LessFunc_t&) [with T = const char*; I = short unsigned int; L = bool (*)(const char* const&, const char* const&); M = CUtlMemory<UtlRBTreeNode_t<const char*, short unsigned int>, short unsigned int>; CUtlRBTree<T, I, L, M>::LessFunc_t = bool (*)(const char* const&, const char* const&)]’:
../tier1/stringpool.cpp:30:33:   required from here
../public/tier1/utlrbtree.h:300:4: warning: ‘CUtlRBTree<const char*, short unsigned int>::m_Elements’ will be initialized after [-Wreorder]
  M m_Elements;
    ^~~~~~~~~~
../public/tier1/utlrbtree.h:298:13: warning:   ‘bool (* CUtlRBTree<const char*, short unsigned int>::m_LessFunc)(const char* const&, const char* const&)’ [-Wreorder]
  LessFunc_t m_LessFunc;
             ^~~~~~~~~~
../public/tier1/utlrbtree.h:378:8: warning:   when initialized here [-Wreorder]
 inline CUtlRBTree<T, I, L, M>::CUtlRBTree( int growSize, int initSize, const LessFunc_t &lessfunc ) :
        ^~~~~~~~~~~~~~~~~~~~~~

[  79/2160] Compiling vstdlib/jobthread.cpp
In file included from ../public/vstdlib/random.h:14,
                 from ../vstdlib/random.cpp:10:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier0/memdbgon.h:34,
                 from ../vstdlib/random.cpp:14:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^

[  80/2160] Compiling vstdlib/KeyValuesSystem.cpp
In file included from ../public/mathlib/vector.h:32,
                 from ../public/mathlib/mathlib.h:14,
                 from ../public/tier1/utlmemory.h:20,
                 from ../public/tier1/utlrbtree.h:12,
                 from ../public/vstdlib/vcover.h:10,
                 from ../vstdlib/vcover.cpp:7:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlrbtree.h:12,
                 from ../public/vstdlib/vcover.h:10,
                 from ../vstdlib/vcover.cpp:7:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
In file included from ../public/vstdlib/vcover.h:10,
                 from ../vstdlib/vcover.cpp:7:
../public/tier1/utlrbtree.h: In instantiation of ‘CUtlRBTree<T, I, L, M>::CUtlRBTree(int, int, const LessFunc_t&) [with T = CVCoverage::Location_t; I = short unsigned int; L = CVCoverage::CLocationLess; M = CUtlMemory<UtlRBTreeNode_t<CVCoverage::Location_t, short unsigned int>, short unsigned int>; CUtlRBTree<T, I, L, M>::LessFunc_t = CVCoverage::CLocationLess]’:
../public/vstdlib/vcover.h:23:15:   required from here
../public/tier1/utlrbtree.h:300:4: warning: ‘CUtlRBTree<CVCoverage::Location_t, short unsigned int, CVCoverage::CLocationLess>::m_Elements’ will be initialized after [-Wreorder]
  M m_Elements;
    ^~~~~~~~~~
../public/tier1/utlrbtree.h:298:13: warning:   ‘CUtlRBTree<CVCoverage::Location_t, short unsigned int, CVCoverage::CLocationLess>::LessFunc_t CUtlRBTree<CVCoverage::Location_t, short unsigned int, CVCoverage::CLocationLess>::m_LessFunc’ [-Wreorder]
  LessFunc_t m_LessFunc;
             ^~~~~~~~~~
../public/tier1/utlrbtree.h:378:8: warning:   when initialized here [-Wreorder]
 inline CUtlRBTree<T, I, L, M>::CUtlRBTree( int growSize, int initSize, const LessFunc_t &lessfunc ) :
        ^~~~~~~~~~~~~~~~~~~~~~

[  81/2160] Linking build/tier1/libtier1.a
[  82/2160] Compiling vstdlib/coroutine.cpp
In file included from ../public/mathlib/vector.h:32,
                 from ../public/mathlib/mathlib.h:14,
                 from ../public/tier1/utlmemory.h:20,
                 from ../public/tier1/utlrbtree.h:12,
                 from ../vstdlib/cvar.cpp:12:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlrbtree.h:12,
                 from ../vstdlib/cvar.cpp:12:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
In file included from ../public/tier1/KeyValues.h:26,
                 from ../vstdlib/cvar.cpp:14:
../public/Color.h: In constructor ‘Color::Color()’:
../public/Color.h:25:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = 0;
            ^~~~
../public/Color.h: In member function ‘void Color::SetRawColor(int)’:
../public/Color.h:59:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = color32;
            ^~~~
../public/Color.h: In member function ‘int Color::GetRawColor() const’:
../public/Color.h:64:19: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return *((int *)this);
                   ^~~~
../public/Color.h: In member function ‘bool Color::operator==(const Color&) const’:
../public/Color.h:84:21: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                     ^~~~
../public/Color.h:84:40: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                                        ^~~
In file included from ../vstdlib/cvar.cpp:16:
../public/tier0/vprof.h: In constructor ‘CVProfNode::CVProfNode(const tchar*, int, CVProfNode*, const tchar*, int)’:
../public/tier0/vprof.h:390:11: warning: ‘CVProfNode::m_nPrevFrameCalls’ will be initialized after [-Wreorder]
  unsigned m_nPrevFrameCalls;
           ^~~~~~~~~~~~~~~~~
../public/tier0/vprof.h:385:8: warning:   ‘int CVProfNode::m_nRecursions’ [-Wreorder]
  int   m_nRecursions;
        ^~~~~~~~~~~~~
../public/tier0/vprof.h:778:8: warning:   when initialized here [-Wreorder]
 inline CVProfNode::CVProfNode( const tchar * pszName, int detailLevel, CVProfNode *pParent, const tchar *pBudgetGroupName, int budgetFlags )
        ^~~~~~~~~~
In file included from /usr/include/sched.h:29,
                 from /usr/include/pthread.h:23,
                 from ../public/tier0/threadtools.h:26,
                 from ../public/mathlib/vector.h:32,
                 from ../public/mathlib/mathlib.h:14,
                 from ../public/tier1/utlmemory.h:20,
                 from ../public/tier1/utlrbtree.h:12,
                 from ../vstdlib/cvar.cpp:12:
../vstdlib/cvar.cpp: In constructor ‘CCvar::CCommandMemberInitializer_Find::CCommandMemberInitializer_Find()’:
../vstdlib/cvar.cpp:169:24: warning: offsetof within non-standard-layout type ‘CCvar’ is conditionally-supported [-Winvalid-offsetof]
  CON_COMMAND_MEMBER_F( CCvar, "find", Find, "Find concommands with the specified string in their name/help text.", 0 )
../public/tier1/convar.h:719:35: note: in expansion of macro ‘GET_OUTER’
    m_ConCommandAccessor.SetOwner( GET_OUTER( _thisclass, m_##_funcname##_register ) ); \
                                   ^~~~~~~~~
../vstdlib/cvar.cpp:169:2: note: in expansion of macro ‘CON_COMMAND_MEMBER_F’
  CON_COMMAND_MEMBER_F( CCvar, "find", Find, "Find concommands with the specified string in their name/help text.", 0 )
  ^~~~~~~~~~~~~~~~~~~~
In file included from ../public/vstdlib/vstdlib.h:16,
                 from ../public/vstdlib/cvar.h:15,
                 from ../vstdlib/cvar.cpp:9:
../public/tier0/platform.h:1527:75: warning: cast from ‘uint8*’ {aka ‘unsigned char*’} to ‘CCvar*’ increases required alignment of target type [-Wcast-align]
    ( ( OuterType * ) ( (uint8 *)this - offsetof( OuterType, OuterMember ) ) )
                                                                           ^
../public/tier1/convar.h:719:35: note: in expansion of macro ‘GET_OUTER’
    m_ConCommandAccessor.SetOwner( GET_OUTER( _thisclass, m_##_funcname##_register ) ); \
                                   ^~~~~~~~~
../vstdlib/cvar.cpp:169:2: note: in expansion of macro ‘CON_COMMAND_MEMBER_F’
  CON_COMMAND_MEMBER_F( CCvar, "find", Find, "Find concommands with the specified string in their name/help text.", 0 )
  ^~~~~~~~~~~~~~~~~~~~

[  83/2160] Compiling tier2/riff.cpp
In file included from ../public/tier1/utlvector.h:23,
                 from ../public/tier1/KeyValues.h:25,
                 from ../vstdlib/KeyValuesSystem.cpp:9:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlvector.h:24,
                 from ../public/tier1/KeyValues.h:25,
                 from ../vstdlib/KeyValuesSystem.cpp:9:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
In file included from ../public/tier1/KeyValues.h:26,
                 from ../vstdlib/KeyValuesSystem.cpp:9:
../public/Color.h: In constructor ‘Color::Color()’:
../public/Color.h:25:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = 0;
            ^~~~
../public/Color.h: In member function ‘void Color::SetRawColor(int)’:
../public/Color.h:59:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = color32;
            ^~~~
../public/Color.h: In member function ‘int Color::GetRawColor() const’:
../public/Color.h:64:19: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return *((int *)this);
                   ^~~~
../public/Color.h: In member function ‘bool Color::operator==(const Color&) const’:
../public/Color.h:84:21: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                     ^~~~
../public/Color.h:84:40: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                                        ^~~
In file included from ../public/tier1/mempool.h:25,
                 from ../vstdlib/KeyValuesSystem.cpp:10:
../public/tier1/utlrbtree.h: In instantiation of ‘CUtlRBTree<T, I, L, M>::CUtlRBTree(int, int, const LessFunc_t&) [with T = CUtlSymbolTable::CStringPoolIndex; I = short unsigned int; L = CUtlSymbolTable::CLess; M = CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, short unsigned int>, short unsigned int>; CUtlRBTree<T, I, L, M>::LessFunc_t = CUtlSymbolTable::CLess]’:
../public/tier1/utlsymbol.h:149:114:   required from here
../public/tier1/utlrbtree.h:300:4: warning: ‘CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, short unsigned int, CUtlSymbolTable::CLess>::m_Elements’ will be initialized after [-Wreorder]
  M m_Elements;
    ^~~~~~~~~~
../public/tier1/utlrbtree.h:298:13: warning:   ‘CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, short unsigned int, CUtlSymbolTable::CLess>::LessFunc_t CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, short unsigned int, CUtlSymbolTable::CLess>::m_LessFunc’ [-Wreorder]
  LessFunc_t m_LessFunc;
             ^~~~~~~~~~
../public/tier1/utlrbtree.h:378:8: warning:   when initialized here [-Wreorder]
 inline CUtlRBTree<T, I, L, M>::CUtlRBTree( int growSize, int initSize, const LessFunc_t &lessfunc ) :
        ^~~~~~~~~~~~~~~~~~~~~~
../public/tier1/utlrbtree.h: In instantiation of ‘CUtlRBTree<T, I, L, M>::CUtlRBTree(int, int, const LessFunc_t&) [with T = CKeyValuesSystem::MemoryLeakTracker_t; I = int; L = bool (*)(const CKeyValuesSystem::MemoryLeakTracker_t&, const CKeyValuesSystem::MemoryLeakTracker_t&); M = CUtlMemory<UtlRBTreeNode_t<CKeyValuesSystem::MemoryLeakTracker_t, int>, int>; CUtlRBTree<T, I, L, M>::LessFunc_t = bool (*)(const CKeyValuesSystem::MemoryLeakTracker_t&, const CKeyValuesSystem::MemoryLeakTracker_t&)]’:
../vstdlib/KeyValuesSystem.cpp:114:38:   required from here
../public/tier1/utlrbtree.h:300:4: warning: ‘CUtlRBTree<CKeyValuesSystem::MemoryLeakTracker_t, int>::m_Elements’ will be initialized after [-Wreorder]
  M m_Elements;
    ^~~~~~~~~~
../public/tier1/utlrbtree.h:298:13: warning:   ‘bool (* CUtlRBTree<CKeyValuesSystem::MemoryLeakTracker_t, int>::m_LessFunc)(const CKeyValuesSystem::MemoryLeakTracker_t&, const CKeyValuesSystem::MemoryLeakTracker_t&)’ [-Wreorder]
  LessFunc_t m_LessFunc;
             ^~~~~~~~~~
../public/tier1/utlrbtree.h:378:8: warning:   when initialized here [-Wreorder]
 inline CUtlRBTree<T, I, L, M>::CUtlRBTree( int growSize, int initSize, const LessFunc_t &lessfunc ) :
        ^~~~~~~~~~~~~~~~~~~~~~
../public/tier1/utlrbtree.h: In instantiation of ‘CUtlRBTree<T, I, L, M>::CUtlRBTree(const LessFunc_t&) [with T = CUtlMap<CUtlString, KeyValues*>::Node_t; I = short unsigned int; L = CUtlMap<CUtlString, KeyValues*>::CKeyLess; M = CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlString, KeyValues*>::Node_t, short unsigned int>, short unsigned int>; CUtlRBTree<T, I, L, M>::LessFunc_t = CUtlMap<CUtlString, KeyValues*>::CKeyLess]’:
../public/tier1/utlmap.h:69:34:   required from ‘CUtlMap<K, T, I>::CUtlMap(CUtlMap<K, T, I>::LessFunc_t) [with K = CUtlString; T = KeyValues*; I = short unsigned int; CUtlMap<K, T, I>::LessFunc_t = bool (*)(const CUtlString&, const CUtlString&); CUtlMap<K, T, I>::KeyType_t = CUtlString]’
../vstdlib/KeyValuesSystem.cpp:114:38:   required from here
../public/tier1/utlrbtree.h:300:4: warning: ‘CUtlRBTree<CUtlMap<CUtlString, KeyValues*>::Node_t, short unsigned int, CUtlMap<CUtlString, KeyValues*>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlString, KeyValues*>::Node_t, short unsigned int>, short unsigned int> >::m_Elements’ will be initialized after [-Wreorder]
  M m_Elements;
    ^~~~~~~~~~
../public/tier1/utlrbtree.h:298:13: warning:   ‘CUtlRBTree<CUtlMap<CUtlString, KeyValues*>::Node_t, short unsigned int, CUtlMap<CUtlString, KeyValues*>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlString, KeyValues*>::Node_t, short unsigned int>, short unsigned int> >::LessFunc_t CUtlRBTree<CUtlMap<CUtlString, KeyValues*>::Node_t, short unsigned int, CUtlMap<CUtlString, KeyValues*>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlString, KeyValues*>::Node_t, short unsigned int>, short unsigned int> >::m_LessFunc’ [-Wreorder]
  LessFunc_t m_LessFunc;
             ^~~~~~~~~~
../public/tier1/utlrbtree.h:390:8: warning:   when initialized here [-Wreorder]
 inline CUtlRBTree<T, I, L, M>::CUtlRBTree( const LessFunc_t &lessfunc ) :
        ^~~~~~~~~~~~~~~~~~~~~~

[  84/2160] Compiling tier2/util_init.cpp
In file included from ../public/tier0/vprof.h:14,
                 from ../vstdlib/coroutine.cpp:29:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../vstdlib/coroutine.cpp:29:
../public/tier0/vprof.h: In constructor ‘CVProfNode::CVProfNode(const tchar*, int, CVProfNode*, const tchar*, int)’:
../public/tier0/vprof.h:390:11: warning: ‘CVProfNode::m_nPrevFrameCalls’ will be initialized after [-Wreorder]
  unsigned m_nPrevFrameCalls;
           ^~~~~~~~~~~~~~~~~
../public/tier0/vprof.h:385:8: warning:   ‘int CVProfNode::m_nRecursions’ [-Wreorder]
  int   m_nRecursions;
        ^~~~~~~~~~~~~
../public/tier0/vprof.h:778:8: warning:   when initialized here [-Wreorder]
 inline CVProfNode::CVProfNode( const tchar * pszName, int detailLevel, CVProfNode *pParent, const tchar *pBudgetGroupName, int budgetFlags )
        ^~~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utllinkedlist.h:17,
                 from ../vstdlib/coroutine.cpp:31:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
In file included from ../public/vstdlib/vstdlib.h:16,
                 from ../public/vstdlib/coroutine.h:11,
                 from ../vstdlib/coroutine.cpp:28:
../vstdlib/coroutine.cpp: In function ‘void Coroutine_YieldToMain()’:
../public/tier0/platform.h:645:43: warning: statement has no effect [-Wunused-value]
 #define UNREACHABLE() { Assert(0); HINT(0); }
                                           ^
../vstdlib/coroutine.cpp:967:3: note: in expansion of macro ‘UNREACHABLE’
   UNREACHABLE();
   ^~~~~~~~~~~
../vstdlib/coroutine.cpp: In function ‘void Coroutine_Finish()’:
../public/tier0/platform.h:645:43: warning: statement has no effect [-Wunused-value]
 #define UNREACHABLE() { Assert(0); HINT(0); }
                                           ^
../vstdlib/coroutine.cpp:994:2: note: in expansion of macro ‘UNREACHABLE’
  UNREACHABLE();
  ^~~~~~~~~~~

[  85/2160] Compiling public/materialsystem/MaterialSystemUtil.cpp
../tier2/riff.cpp:9: warning: ignoring #pragma warning  [-Wunknown-pragmas]
 #pragma warning(disable : 4512) // warning C4512: 'InFileRIFF' : assignment operator could not be generated
 
../tier2/riff.cpp:10: warning: ignoring #pragma warning  [-Wunknown-pragmas]
 #pragma warning(disable : 4514) // warning C4514: 'RIFFName' : unreferenced inline function has been removed
 
In file included from ../public/tier0/memdbgon.h:34,
                 from ../tier2/riff.cpp:18:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^

[  86/2160] Compiling tier2/fileutils.cpp
In file included from ../public/tier0/tslist.h:27,
                 from ../vstdlib/jobthread.cpp:12:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier0/tslist.h:28,
                 from ../vstdlib/jobthread.cpp:12:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
In file included from ../vstdlib/jobthread.cpp:14:
../public/vstdlib/jobthread.h: In constructor ‘ThreadPoolStartParams_t::ThreadPoolStartParams_t(bool, unsigned int, int*, ThreeState_t, unsigned int, int)’:
../public/vstdlib/jobthread.h:125:22: warning: ‘ThreadPoolStartParams_t::bIOThreads’ will be initialized after [-Wreorder]
  bool   bIOThreads : 1;
                      ^
../public/vstdlib/jobthread.h:118:9: warning:   ‘int ThreadPoolStartParams_t::nThreads’ [-Wreorder]
  int    nThreads;
         ^~~~~~~~
In file included from ../vstdlib/jobthread.cpp:14:
../public/vstdlib/jobthread.h:101:2: warning:   when initialized here [-Wreorder]
  ThreadPoolStartParams_t( bool bIOThreads = false, unsigned nThreads = -1, int *pAffinities = NULL, ThreeState_t fDistribute = TRS_NONE, unsigned nStackSize = -1, int iThreadPriority = SHRT_MIN )
  ^~~~~~~~~~~~~~~~~~~~~~~
In file included from ../vstdlib/jobthread.cpp:14:
../public/vstdlib/jobthread.h:122:9: warning: ‘ThreadPoolStartParams_t::iThreadPriority’ will be initialized after [-Wreorder]
  int    iThreadPriority;
         ^~~~~~~~~~~~~~~
../public/vstdlib/jobthread.h:119:9: warning:   ‘int ThreadPoolStartParams_t::nThreadsMax’ [-Wreorder]
  int    nThreadsMax;
         ^~~~~~~~~~~
In file included from ../vstdlib/jobthread.cpp:14:
../public/vstdlib/jobthread.h:101:2: warning:   when initialized here [-Wreorder]
  ThreadPoolStartParams_t( bool bIOThreads = false, unsigned nThreads = -1, int *pAffinities = NULL, ThreeState_t fDistribute = TRS_NONE, unsigned nStackSize = -1, int iThreadPriority = SHRT_MIN )
  ^~~~~~~~~~~~~~~~~~~~~~~
In file included from ../vstdlib/jobthread.cpp:14:
../public/vstdlib/jobthread.h:106:92: warning: comparison of integer expressions of different signedness: ‘unsigned int’ and ‘int’ [-Wsign-compare]
   bUseAffinityTable = ( pAffinities != NULL ) && ( fDistribute == TRS_TRUE ) && ( nThreads != -1 );
                                                                                   ~~~~~~~~~^~~~~
../public/vstdlib/jobthread.h: In constructor ‘CJob::CJob(JobPriority_t)’:
../public/vstdlib/jobthread.h:535:19: warning: ‘CJob::m_ThreadPoolData’ will be initialized after [-Wreorder]
  ThreadPoolData_t m_ThreadPoolData;
                   ^~~~~~~~~~~~~~~~
../public/vstdlib/jobthread.h:530:17: warning:   ‘JobPriority_t CJob::m_priority’ [-Wreorder]
  JobPriority_t  m_priority;
                 ^~~~~~~~~~
../public/vstdlib/jobthread.h:443:2: warning:   when initialized here [-Wreorder]
  CJob( JobPriority_t priority = JP_NORMAL )
  ^~~~
../public/vstdlib/jobthread.h:537:16: warning: ‘CJob::m_CompleteEvent’ will be initialized after [-Wreorder]
  CThreadEvent  m_CompleteEvent;
                ^~~~~~~~~~~~~~~
../public/vstdlib/jobthread.h:533:10: warning:   ‘char CJob::m_iServicingThread’ [-Wreorder]
  char    m_iServicingThread;
          ^~~~~~~~~~~~~~~~~~
../public/vstdlib/jobthread.h:443:2: warning:   when initialized here [-Wreorder]
  CJob( JobPriority_t priority = JP_NORMAL )
  ^~~~
In file included from ../vstdlib/jobthread.cpp:20:
../public/tier0/vprof.h: In constructor ‘CVProfNode::CVProfNode(const tchar*, int, CVProfNode*, const tchar*, int)’:
../public/tier0/vprof.h:390:11: warning: ‘CVProfNode::m_nPrevFrameCalls’ will be initialized after [-Wreorder]
  unsigned m_nPrevFrameCalls;
           ^~~~~~~~~~~~~~~~~
../public/tier0/vprof.h:385:8: warning:   ‘int CVProfNode::m_nRecursions’ [-Wreorder]
  int   m_nRecursions;
        ^~~~~~~~~~~~~
../public/tier0/vprof.h:778:8: warning:   when initialized here [-Wreorder]
 inline CVProfNode::CVProfNode( const tchar * pszName, int detailLevel, CVProfNode *pParent, const tchar *pBudgetGroupName, int budgetFlags )
        ^~~~~~~~~~
../vstdlib/jobthread.cpp: In constructor ‘CJobQueue::CJobQueue()’:
../vstdlib/jobthread.cpp:56:22: warning: comparison of integer expressions of different signedness: ‘int’ and ‘unsigned int’ [-Wsign-compare]
   for ( int i = 0; i < ARRAYSIZE( m_pQueues ); i++ )
../vstdlib/jobthread.cpp: In destructor ‘CJobQueue::~CJobQueue()’:
../vstdlib/jobthread.cpp:64:22: warning: comparison of integer expressions of different signedness: ‘int’ and ‘unsigned int’ [-Wsign-compare]
   for ( int i = 0; i < ARRAYSIZE( m_pQueues ); i++ )
../vstdlib/jobthread.cpp: In member function ‘virtual int CJobThread::Run()’:
../vstdlib/jobthread.cpp:414:46: warning: comparison of integer expressions of different signedness: ‘unsigned int’ and ‘int’ [-Wsign-compare]
   while (!bExit && ( ( waitResult = Wait() ) != WAIT_FAILED ) )
../vstdlib/jobthread.cpp: In constructor ‘CThreadPool::CThreadPool()’:
../vstdlib/jobthread.cpp:280:20: warning: ‘CThreadPool::m_nJobs’ will be initialized after [-Wreorder]
  CInterlockedInt   m_nJobs;
                    ^~~~~~~
../vstdlib/jobthread.cpp:279:11: warning:   ‘int CThreadPool::m_nSuspend’ [-Wreorder]
  int      m_nSuspend;
           ^~~~~~~~~~
../vstdlib/jobthread.cpp:508:1: warning:   when initialized here [-Wreorder]
 CThreadPool::CThreadPool() :
 ^~~~~~~~~~~
../vstdlib/jobthread.cpp: In function ‘void ThreadPoolTest::Test(bool, bool, bool, bool)’:
../vstdlib/jobthread.cpp:1231:24: warning: comparison of integer expressions of different signedness: ‘int’ and ‘unsigned int’ [-Wsign-compare]
     for ( int j = 0; j < ARRAYSIZE(jobs); j++ )
../vstdlib/jobthread.cpp:1258:24: warning: comparison of integer expressions of different signedness: ‘int’ and ‘unsigned int’ [-Wsign-compare]
     for ( int j = 0; j < ARRAYSIZE(jobs); j++ )
../vstdlib/jobthread.cpp: In function ‘void ThreadPoolTest::TestForcedExecute()’:
../vstdlib/jobthread.cpp:1346:23: warning: comparison of integer expressions of different signedness: ‘int’ and ‘unsigned int’ [-Wsign-compare]
    for ( int j = 0; j < ARRAYSIZE(jobs); j++ )
In file included from ../public/tier1/utllinkedlist.h:17,
                 from ../public/vstdlib/jobthread.h:33,
                 from ../vstdlib/jobthread.cpp:14:
../public/tier1/utlmemory.h: In instantiation of ‘T* CUtlMemoryFixed<T, SIZE, nAlignment>::Base() [with T = CJob*; unsigned int SIZE = 16; int nAlignment = 0]’:
../public/tier1/utlvector.h:91:42:   required from ‘T* CUtlVector<T, A>::Base() [with T = CJob*; A = CUtlMemoryFixed<CJob*, 16, 0>]’
../public/vstdlib/jobthread.h:678:33:   required from here
../public/tier1/utlmemory.h:223:55: warning: cast from ‘char*’ to ‘CJob**’ increases required alignment of target type [-Wcast-align]
  T* Base()            { if ( nAlignment == 0 ) return (T*)(&m_Memory[0]); else return (T*)AlignValue( &m_Memory[0], nAlignment ); }
                                                       ^~~~~~~~~~~~~~~~~~
../public/tier1/utlmemory.h:223:87: warning: cast from ‘char*’ to ‘CJob**’ increases required alignment of target type [-Wcast-align]
  T* Base()            { if ( nAlignment == 0 ) return (T*)(&m_Memory[0]); else return (T*)AlignValue( &m_Memory[0], nAlignment ); }
                                                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../public/tier1/utlmemory.h: In instantiation of ‘T* CUtlMemoryFixed<T, SIZE, nAlignment>::Base() [with T = CThreadEvent*; unsigned int SIZE = 64; int nAlignment = 0]’:
../public/tier1/utlvector.h:91:42:   required from ‘T* CUtlVector<T, A>::Base() [with T = CThreadEvent*; A = CUtlMemoryFixed<CThreadEvent*, 64, 0>]’
../vstdlib/jobthread.cpp:662:33:   required from here
../public/tier1/utlmemory.h:223:55: warning: cast from ‘char*’ to ‘CThreadEvent**’ increases required alignment of target type [-Wcast-align]
  T* Base()            { if ( nAlignment == 0 ) return (T*)(&m_Memory[0]); else return (T*)AlignValue( &m_Memory[0], nAlignment ); }
                                                       ^~~~~~~~~~~~~~~~~~
../public/tier1/utlmemory.h:223:87: warning: cast from ‘char*’ to ‘CThreadEvent**’ increases required alignment of target type [-Wcast-align]
  T* Base()            { if ( nAlignment == 0 ) return (T*)(&m_Memory[0]); else return (T*)AlignValue( &m_Memory[0], nAlignment ); }
                                                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../public/vstdlib/jobthread.h:35,
                 from ../vstdlib/jobthread.cpp:14:
../public/tier1/functors.h: In instantiation of ‘CMemberFuncProxyBase<OBJECT_TYPE_PTR, FUNCTION_TYPE, MEM_POLICY>::CMemberFuncProxyBase(OBJECT_TYPE_PTR, FUNCTION_TYPE) [with OBJECT_TYPE_PTR = CJob*; FUNCTION_TYPE = int (CJob::*)(); MEM_POLICY = CFuncMemPolicyNone]’:
../public/tier1/functors.h:409:1:   required from ‘CMemberFuncProxy0<OBJECT_TYPE_PTR, FUNCTION_TYPE, MEM_POLICY>::CMemberFuncProxy0(OBJECT_TYPE_PTR, FUNCTION_TYPE) [with OBJECT_TYPE_PTR = CJob*; FUNCTION_TYPE = int (CJob::*)(); MEM_POLICY = CFuncMemPolicyNone]’
../public/tier1/functors.h:451:1:   required from ‘CMemberFunctor0<OBJECT_TYPE_PTR, FUNCTION_TYPE, FUNCTOR_BASE, MEM_POLICY>::CMemberFunctor0(OBJECT_TYPE_PTR, FUNCTION_TYPE) [with OBJECT_TYPE_PTR = CJob*; FUNCTION_TYPE = int (CJob::*)(); FUNCTOR_BASE = CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >; MEM_POLICY = CFuncMemPolicyNone]’
../public/tier1/functors.h:478:1:   required from ‘CFunctor* CreateFunctor(OBJECT_TYPE_PTR, FUNCTION_RETTYPE (FUNCTION_CLASS::*)()) [with OBJECT_TYPE_PTR = CJob*; FUNCTION_CLASS = CJob; FUNCTION_RETTYPE = int]’
../public/vstdlib/jobthread.h:1170:123:   required from here
../public/tier1/functors.h:388:18: warning: ‘CMemberFuncProxyBase<CJob*, int (CJob::*)(), CFuncMemPolicyNone>::m_pObject’ will be initialized after [-Wreorder]
  OBJECT_TYPE_PTR m_pObject;
                  ^~~~~~~~~
../public/tier1/functors.h:387:16: warning:   ‘int (CJob::* CMemberFuncProxyBase<CJob*, int (CJob::*)(), CFuncMemPolicyNone>::m_pfnProxied)()’ [-Wreorder]
  FUNCTION_TYPE m_pfnProxied;
                ^~~~~~~~~~~~
../public/tier1/functors.h:364:2: warning:   when initialized here [-Wreorder]
  CMemberFuncProxyBase( OBJECT_TYPE_PTR pObject, FUNCTION_TYPE pfnProxied )
  ^~~~~~~~~~~~~~~~~~~~
In file included from ../public/tier1/utllinkedlist.h:17,
                 from ../public/vstdlib/jobthread.h:33,
                 from ../vstdlib/jobthread.cpp:14:
../public/tier1/utlmemory.h: In instantiation of ‘const T* CUtlMemoryFixed<T, SIZE, nAlignment>::Base() const [with T = CJob*; unsigned int SIZE = 16; int nAlignment = 0]’:
../public/tier1/utlmemory.h:229:85:   required from ‘const T& CUtlMemoryFixed<T, SIZE, nAlignment>::operator[](int) const [with T = CJob*; unsigned int SIZE = 16; int nAlignment = 0]’
../public/tier1/utlvector.h:721:17:   required from ‘const T& CUtlVector<T, A>::Element(int) const [with T = CJob*; A = CUtlMemoryFixed<CJob*, 16, 0>]’
../public/tier1/utlvector.h:1260:18:   required from ‘int CUtlVector<T, A>::Find(const T&) const [with T = CJob*; A = CUtlMemoryFixed<CJob*, 16, 0>]’
../public/tier1/utlvector.h:1333:13:   required from ‘bool CUtlVector<T, A>::FindAndRemove(const T&) [with T = CJob*; A = CUtlMemoryFixed<CJob*, 16, 0>]’
../public/vstdlib/jobthread.h:622:30:   required from here
../public/tier1/utlmemory.h:224:64: warning: cast from ‘const char*’ to ‘CJob**’ increases required alignment of target type [-Wcast-align]
  const T* Base() const         { if ( nAlignment == 0 ) return (T*)(&m_Memory[0]); else return (T*)AlignValue( &m_Memory[0], nAlignment ); }
                                                                ^~~~~~~~~~~~~~~~~~
../public/tier1/utlmemory.h:224:96: warning: cast from ‘const char*’ to ‘CJob**’ increases required alignment of target type [-Wcast-align]
  const T* Base() const         { if ( nAlignment == 0 ) return (T*)(&m_Memory[0]); else return (T*)AlignValue( &m_Memory[0], nAlignment ); }
                                                                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from ../public/vstdlib/jobthread.h:35,
                 from ../vstdlib/jobthread.cpp:14:
../public/tier1/functors.h: In instantiation of ‘CMemberFuncProxyBase<OBJECT_TYPE_PTR, FUNCTION_TYPE, MEM_POLICY>::CMemberFuncProxyBase(OBJECT_TYPE_PTR, FUNCTION_TYPE) [with OBJECT_TYPE_PTR = CParallelLoopProcessor<CFuncJobItemProcessor<const long int> >*; FUNCTION_TYPE = void (CParallelLoopProcessor<CFuncJobItemProcessor<const long int> >::*)(); MEM_POLICY = CFuncMemPolicyNone]’:
../public/tier1/functors.h:409:1:   required from ‘CMemberFuncProxy0<OBJECT_TYPE_PTR, FUNCTION_TYPE, MEM_POLICY>::CMemberFuncProxy0(OBJECT_TYPE_PTR, FUNCTION_TYPE) [with OBJECT_TYPE_PTR = CParallelLoopProcessor<CFuncJobItemProcessor<const long int> >*; FUNCTION_TYPE = void (CParallelLoopProcessor<CFuncJobItemProcessor<const long int> >::*)(); MEM_POLICY = CFuncMemPolicyNone]’
../public/tier1/functors.h:451:1:   required from ‘CMemberFunctor0<OBJECT_TYPE_PTR, FUNCTION_TYPE, FUNCTOR_BASE, MEM_POLICY>::CMemberFunctor0(OBJECT_TYPE_PTR, FUNCTION_TYPE) [with OBJECT_TYPE_PTR = CParallelLoopProcessor<CFuncJobItemProcessor<const long int> >*; FUNCTION_TYPE = void (CParallelLoopProcessor<CFuncJobItemProcessor<const long int> >::*)(); FUNCTOR_BASE = CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >; MEM_POLICY = CFuncMemPolicyNone]’
../public/tier1/functors.h:478:1:   required from ‘CFunctor* CreateFunctor(OBJECT_TYPE_PTR, FUNCTION_RETTYPE (FUNCTION_CLASS::*)()) [with OBJECT_TYPE_PTR = CParallelLoopProcessor<CFuncJobItemProcessor<const long int> >*; FUNCTION_CLASS = CParallelLoopProcessor<CFuncJobItemProcessor<const long int> >; FUNCTION_RETTYPE = void]’
../public/vstdlib/jobthread.h:388:2:   required from ‘CJob* IThreadPool::QueueCall(OBJECT_TYPE*, FUNCTION_RETTYPE (FUNCTION_CLASS::*)()) [with OBJECT_TYPE = CParallelLoopProcessor<CFuncJobItemProcessor<const long int> >; FUNCTION_CLASS = CParallelLoopProcessor<CFuncJobItemProcessor<const long int> >; FUNCTION_RETTYPE = void]’
../public/vstdlib/jobthread.h:1006:5:   required from ‘void CParallelLoopProcessor<ITEM_PROCESSOR_TYPE>::Run(long int, long int, int) [with ITEM_PROCESSOR_TYPE = CFuncJobItemProcessor<const long int>]’
../public/vstdlib/jobthread.h:1057:46:   required from here
../public/tier1/functors.h:388:18: warning: ‘CMemberFuncProxyBase<CParallelLoopProcessor<CFuncJobItemProcessor<const long int> >*, void (CParallelLoopProcessor<CFuncJobItemProcessor<const long int> >::*)(), CFuncMemPolicyNone>::m_pObject’ will be initialized after [-Wreorder]
  OBJECT_TYPE_PTR m_pObject;
                  ^~~~~~~~~
../public/tier1/functors.h:387:16: warning:   ‘void (CParallelLoopProcessor<CFuncJobItemProcessor<const long int> >::* CMemberFuncProxyBase<CParallelLoopProcessor<CFuncJobItemProcessor<const long int> >*, void (CParallelLoopProcessor<CFuncJobItemProcessor<const long int> >::*)(), CFuncMemPolicyNone>::m_pfnProxied)()’ [-Wreorder]
  FUNCTION_TYPE m_pfnProxied;
                ^~~~~~~~~~~~
../public/tier1/functors.h:364:2: warning:   when initialized here [-Wreorder]
  CMemberFuncProxyBase( OBJECT_TYPE_PTR pObject, FUNCTION_TYPE pfnProxied )
  ^~~~~~~~~~~~~~~~~~~~

[  87/2160] Compiling tier2/dmconnect.cpp
In file included from ../public/tier1/utlvector.h:23,
                 from ../public/tier1/convar.h:21,
                 from ../public/tier1/tier1.h:16,
                 from ../public/tier2/tier2.h:15,
                 from ../tier2/util_init.cpp:8:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlvector.h:24,
                 from ../public/tier1/convar.h:21,
                 from ../public/tier1/tier1.h:16,
                 from ../public/tier2/tier2.h:15,
                 from ../tier2/util_init.cpp:8:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^

[  88/2160] Compiling tier2/defaultfilesystem.cpp
In file included from ../public/tier1/utlvector.h:23,
                 from ../public/tier1/convar.h:21,
                 from ../public/tier1/tier1.h:16,
                 from ../public/tier2/tier2.h:15,
                 from ../public/tier2/fileutils.h:16,
                 from ../tier2/fileutils.cpp:7:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlvector.h:24,
                 from ../public/tier1/convar.h:21,
                 from ../public/tier1/tier1.h:16,
                 from ../public/tier2/tier2.h:15,
                 from ../public/tier2/fileutils.h:16,
                 from ../tier2/fileutils.cpp:7:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
In file included from ../public/tier1/utlsymbol.h:17,
                 from ../public/filesystem.h:17,
                 from ../public/tier2/fileutils.h:20,
                 from ../tier2/fileutils.cpp:7:
../public/tier1/utlrbtree.h: In instantiation of ‘CUtlRBTree<T, I, L, M>::CUtlRBTree(int, int, const LessFunc_t&) [with T = CUtlSymbolTable::CStringPoolIndex; I = short unsigned int; L = CUtlSymbolTable::CLess; M = CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, short unsigned int>, short unsigned int>; CUtlRBTree<T, I, L, M>::LessFunc_t = CUtlSymbolTable::CLess]’:
../public/tier1/utlsymbol.h:149:114:   required from here
../public/tier1/utlrbtree.h:300:4: warning: ‘CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, short unsigned int, CUtlSymbolTable::CLess>::m_Elements’ will be initialized after [-Wreorder]
  M m_Elements;
    ^~~~~~~~~~
../public/tier1/utlrbtree.h:298:13: warning:   ‘CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, short unsigned int, CUtlSymbolTable::CLess>::LessFunc_t CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, short unsigned int, CUtlSymbolTable::CLess>::m_LessFunc’ [-Wreorder]
  LessFunc_t m_LessFunc;
             ^~~~~~~~~~
../public/tier1/utlrbtree.h:378:8: warning:   when initialized here [-Wreorder]
 inline CUtlRBTree<T, I, L, M>::CUtlRBTree( int growSize, int initSize, const LessFunc_t &lessfunc ) :
        ^~~~~~~~~~~~~~~~~~~~~~

[  89/2160] Linking build/vstdlib/libvstdlib.so
In file included from ../public/tier1/utlvector.h:23,
                 from ../public/tier1/convar.h:21,
                 from ../public/tier1/tier1.h:16,
                 from ../public/tier2/tier2.h:15,
                 from ../tier2/dmconnect.cpp:7:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlvector.h:24,
                 from ../public/tier1/convar.h:21,
                 from ../public/tier1/tier1.h:16,
                 from ../public/tier2/tier2.h:15,
                 from ../tier2/dmconnect.cpp:7:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
In file included from ../public/datamodel/dmattributetypes.h:17,
                 from ../public/datamodel/idatamodel.h:17,
                 from ../tier2/dmconnect.cpp:8:
../public/Color.h: In constructor ‘Color::Color()’:
../public/Color.h:25:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = 0;
            ^~~~
../public/Color.h: In member function ‘void Color::SetRawColor(int)’:
../public/Color.h:59:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = color32;
            ^~~~
../public/Color.h: In member function ‘int Color::GetRawColor() const’:
../public/Color.h:64:19: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return *((int *)this);
                   ^~~~
../public/Color.h: In member function ‘bool Color::operator==(const Color&) const’:
../public/Color.h:84:21: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                     ^~~~
../public/Color.h:84:40: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                                        ^~~
In file included from ../public/tier1/utlsymbol.h:17,
                 from ../public/datamodel/idatamodel.h:15,
                 from ../tier2/dmconnect.cpp:8:
../public/tier1/utlrbtree.h: In instantiation of ‘CUtlRBTree<T, I, L, M>::CUtlRBTree(int, int, const LessFunc_t&) [with T = CUtlSymbolTable::CStringPoolIndex; I = short unsigned int; L = CUtlSymbolTable::CLess; M = CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, short unsigned int>, short unsigned int>; CUtlRBTree<T, I, L, M>::LessFunc_t = CUtlSymbolTable::CLess]’:
../public/tier1/utlsymbol.h:149:114:   required from here
../public/tier1/utlrbtree.h:300:4: warning: ‘CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, short unsigned int, CUtlSymbolTable::CLess>::m_Elements’ will be initialized after [-Wreorder]
  M m_Elements;
    ^~~~~~~~~~
../public/tier1/utlrbtree.h:298:13: warning:   ‘CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, short unsigned int, CUtlSymbolTable::CLess>::LessFunc_t CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, short unsigned int, CUtlSymbolTable::CLess>::m_LessFunc’ [-Wreorder]
  LessFunc_t m_LessFunc;
             ^~~~~~~~~~
../public/tier1/utlrbtree.h:378:8: warning:   when initialized here [-Wreorder]
 inline CUtlRBTree<T, I, L, M>::CUtlRBTree( int growSize, int initSize, const LessFunc_t &lessfunc ) :
        ^~~~~~~~~~~~~~~~~~~~~~

[  90/2160] Compiling tier2/renderutils.cpp
In file included from ../public/mathlib/ssemath.h:12,
                 from ../public/mathlib/lightdesc.h:11,
                 from ../public/materialsystem/imaterialsystem.h:245,
                 from ../public/materialsystem/MaterialSystemUtil.h:17,
                 from ../public/materialsystem/MaterialSystemUtil.cpp:9:
../common/sse2neon.h:122:2: error: #error "Unsupported target. Must be either ARMv7-A+NEON or ARMv8-A."
 #error "Unsupported target. Must be either ARMv7-A+NEON or ARMv8-A."
  ^~~~~
In file included from ../public/materialsystem/MaterialSystemUtil.h:16,
                 from ../public/materialsystem/MaterialSystemUtil.cpp:9:
../public/bitmap/imageformat.h: In member function ‘BGRA8888_t& BGRA8888_t::operator=(const BGRA8888_t&)’:
../public/bitmap/imageformat.h:185:22: warning: cast from ‘BGRA8888_t*’ to ‘unsigned int*’ increases required alignment of target type [-Wcast-align]
   *( unsigned int * )this = *( unsigned int * )&in;
                      ^~~~
../public/bitmap/imageformat.h:185:49: warning: cast from ‘const BGRA8888_t*’ to ‘unsigned int*’ increases required alignment of target type [-Wcast-align]
   *( unsigned int * )this = *( unsigned int * )&in;
                                                 ^~
../public/bitmap/imageformat.h: In member function ‘BGRX8888_t& BGRX8888_t::operator=(const BGRX8888_t&)’:
../public/bitmap/imageformat.h:198:22: warning: cast from ‘BGRX8888_t*’ to ‘unsigned int*’ increases required alignment of target type [-Wcast-align]
   *( unsigned int * )this = *( unsigned int * ) &in;
                      ^~~~
../public/bitmap/imageformat.h:198:50: warning: cast from ‘const BGRX8888_t*’ to ‘unsigned int*’ increases required alignment of target type [-Wcast-align]
   *( unsigned int * )this = *( unsigned int * ) &in;
                                                  ^~
In file included from ../public/materialsystem/MaterialSystemUtil.h:16,
                 from ../public/materialsystem/MaterialSystemUtil.cpp:9:
../public/bitmap/imageformat.h: In constructor ‘ImageLoader::ResampleInfo_t::ResampleInfo_t()’:
../public/bitmap/imageformat.h:454:7: warning: ‘ImageLoader::ResampleInfo_t::m_nFlags’ will be initialized after [-Wreorder]
   int m_nFlags;
       ^~~~~~~~
../public/bitmap/imageformat.h:451:9: warning:   ‘float ImageLoader::ResampleInfo_t::m_flAlphaThreshhold’ [-Wreorder]
   float m_flAlphaThreshhold;
         ^~~~~~~~~~~~~~~~~~~
../public/bitmap/imageformat.h:428:3: warning:   when initialized here [-Wreorder]
   ResampleInfo_t() : m_nFlags(0), m_flAlphaThreshhold(0.4f), m_flAlphaHiFreqThreshhold(0.4f), m_nSrcDepth(1), m_nDestDepth(1)
   ^~~~~~~~~~~~~~
../public/bitmap/imageformat.h:452:9: warning: ‘ImageLoader::ResampleInfo_t::m_flAlphaHiFreqThreshhold’ will be initialized after [-Wreorder]
   float m_flAlphaHiFreqThreshhold;
         ^~~~~~~~~~~~~~~~~~~~~~~~~
../public/bitmap/imageformat.h:439:7: warning:   ‘int ImageLoader::ResampleInfo_t::m_nSrcDepth’ [-Wreorder]
   int m_nSrcDepth;
       ^~~~~~~~~~~
../public/bitmap/imageformat.h:428:3: warning:   when initialized here [-Wreorder]
   ResampleInfo_t() : m_nFlags(0), m_flAlphaThreshhold(0.4f), m_flAlphaHiFreqThreshhold(0.4f), m_nSrcDepth(1), m_nDestDepth(1)
   ^~~~~~~~~~~~~~
In file included from ../public/mathlib/vector.h:32,
                 from ../public/materialsystem/imaterialsystem.h:21,
                 from ../public/materialsystem/MaterialSystemUtil.h:17,
                 from ../public/materialsystem/MaterialSystemUtil.cpp:9:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlvector.h:24,
                 from ../public/datamap.h:18,
                 from ../public/vtf/vtf.h:437,
                 from ../public/materialsystem/imaterialsystem.h:29,
                 from ../public/materialsystem/MaterialSystemUtil.h:17,
                 from ../public/materialsystem/MaterialSystemUtil.cpp:9:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
In file included from ../public/mathlib/ssemath.h:12,
                 from ../public/mathlib/lightdesc.h:11,
                 from ../public/materialsystem/imaterialsystem.h:245,
                 from ../public/materialsystem/MaterialSystemUtil.h:17,
                 from ../public/materialsystem/MaterialSystemUtil.cpp:9:
../common/sse2neon.h: In function ‘__m128i _mm_sll_epi16(__m128i, __m128i)’:
../common/sse2neon.h:2652:46: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
     uint64_t c = vreinterpretq_nth_u64_m128i(count, 0);
                                              ^~~~~
../common/sse2neon.h:339:58: note: in definition of macro ‘vreinterpretq_nth_u64_m128i’
 #define vreinterpretq_nth_u64_m128i(x, n) (((SIMDVec *) &x)->m128_u64[n])
                                                          ^
../common/sse2neon.h: In function ‘__m128i _mm_sll_epi32(__m128i, __m128i)’:
../common/sse2neon.h:2671:46: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
     uint64_t c = vreinterpretq_nth_u64_m128i(count, 0);
                                              ^~~~~
../common/sse2neon.h:339:58: note: in definition of macro ‘vreinterpretq_nth_u64_m128i’
 #define vreinterpretq_nth_u64_m128i(x, n) (((SIMDVec *) &x)->m128_u64[n])
                                                          ^
../common/sse2neon.h: In function ‘__m128i _mm_sll_epi64(__m128i, __m128i)’:
../common/sse2neon.h:2688:46: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
     uint64_t c = vreinterpretq_nth_u64_m128i(count, 0);
                                              ^~~~~
../common/sse2neon.h:339:58: note: in definition of macro ‘vreinterpretq_nth_u64_m128i’
 #define vreinterpretq_nth_u64_m128i(x, n) (((SIMDVec *) &x)->m128_u64[n])
                                                          ^
../common/sse2neon.h: In function ‘__m128i _mm_srl_epi16(__m128i, __m128i)’:
../common/sse2neon.h:2707:46: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
     uint64_t c = vreinterpretq_nth_u64_m128i(count, 0);
                                              ^~~~~
../common/sse2neon.h:339:58: note: in definition of macro ‘vreinterpretq_nth_u64_m128i’
 #define vreinterpretq_nth_u64_m128i(x, n) (((SIMDVec *) &x)->m128_u64[n])
                                                          ^
../common/sse2neon.h: In function ‘__m128i _mm_srl_epi32(__m128i, __m128i)’:
../common/sse2neon.h:2726:46: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
     uint64_t c = vreinterpretq_nth_u64_m128i(count, 0);
                                              ^~~~~
../common/sse2neon.h:339:58: note: in definition of macro ‘vreinterpretq_nth_u64_m128i’
 #define vreinterpretq_nth_u64_m128i(x, n) (((SIMDVec *) &x)->m128_u64[n])
                                                          ^
../common/sse2neon.h: In function ‘__m128i _mm_srl_epi64(__m128i, __m128i)’:
../common/sse2neon.h:2743:46: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
     uint64_t c = vreinterpretq_nth_u64_m128i(count, 0);
                                              ^~~~~
../common/sse2neon.h:339:58: note: in definition of macro ‘vreinterpretq_nth_u64_m128i’
 #define vreinterpretq_nth_u64_m128i(x, n) (((SIMDVec *) &x)->m128_u64[n])
                                                          ^
../common/sse2neon.h: In function ‘void _mm_maskmoveu_si128(__m128i, __m128i, char*)’:
../common/sse2neon.h:3792:44: warning: cast from ‘char*’ to ‘const float*’ increases required alignment of target type [-Wcast-align]
     __m128 b = _mm_load_ps((const float *) mem_addr);
                                            ^~~~~~~~
../common/sse2neon.h: In function ‘__m128i _mm_aesenclast_si128(__m128i, __m128i)’:
../common/sse2neon.h:7302:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
         [0] = {SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 0)],
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7303:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
                SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 5)],
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7304:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
                SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 10)],
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7305:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
                SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 15)]},
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7306:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
         [1] = {SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 4)],
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7307:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
                SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 9)],
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7308:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
                SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 14)],
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7309:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
                SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 3)]},
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7310:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
         [2] = {SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 8)],
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7311:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
                SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 13)],
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7312:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
                SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 2)],
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7313:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
                SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 7)]},
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7314:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
         [3] = {SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 12)],
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7315:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
                SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 1)],
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7316:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
                SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 6)],
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7317:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
                SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 11)]},
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7320:36: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
         vreinterpretq_nth_u8_m128i(a, i) =
                                    ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7321:58: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
             v[i / 4][i % 4] ^ vreinterpretq_nth_u8_m128i(RoundKey, i);
                                                          ^~~~~~~~
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
In file included from ../public/mathlib/ssemath.h:12,
                 from ../public/mathlib/lightdesc.h:11,
                 from ../public/materialsystem/imaterialsystem.h:245,
                 from ../public/materialsystem/MaterialSystemUtil.h:17,
                 from ../public/materialsystem/MaterialSystemUtil.cpp:9:
../common/sse2neon.h: In function ‘void _mm_maskmove_si64(__m64, __m64, char*)’:
../common/sse2neon.h:7498:44: warning: cast from ‘char*’ to ‘const float*’ increases required alignment of target type [-Wcast-align]
     __m128 b = _mm_load_ps((const float *) mem_addr);
                                            ^~~~~~~~
../common/sse2neon.h: At global scope:
../common/sse2neon.h:7595:9: warning: ‘#pragma GCC pop_options’ without a corresponding ‘#pragma GCC push_options’ [-Wpragmas]
 #pragma GCC pop_options
         ^~~
In file included from ../public/mathlib/lightdesc.h:11,
                 from ../public/materialsystem/imaterialsystem.h:245,
                 from ../public/materialsystem/MaterialSystemUtil.h:17,
                 from ../public/materialsystem/MaterialSystemUtil.cpp:9:
../public/mathlib/ssemath.h: In function ‘void ConvertStoreAsIntsSIMD(intx4*, const fltx4&)’:
../public/mathlib/ssemath.h:2423:41: warning: cast from ‘int*’ to ‘__m64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  *reinterpret_cast<__m64 *>(&(*pDest)[0]) = bottom;
                                         ^
../public/mathlib/ssemath.h:2424:41: warning: cast from ‘int*’ to ‘__m64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  *reinterpret_cast<__m64 *>(&(*pDest)[2]) = top;
                                         ^
In file included from ../public/tier1/KeyValues.h:26,
                 from ../public/materialsystem/MaterialSystemUtil.cpp:13:
../public/Color.h: In constructor ‘Color::Color()’:
../public/Color.h:25:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = 0;
            ^~~~
../public/Color.h: In member function ‘void Color::SetRawColor(int)’:
../public/Color.h:59:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = color32;
            ^~~~
../public/Color.h: In member function ‘int Color::GetRawColor() const’:
../public/Color.h:64:19: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return *((int *)this);
                   ^~~~
../public/Color.h: In member function ‘bool Color::operator==(const Color&) const’:
../public/Color.h:84:21: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                     ^~~~
../public/Color.h:84:40: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                                        ^~~

In file included from ../public/tier1/utlvector.h:23,
                 from ../public/tier1/convar.h:21,
                 from ../public/tier1/tier1.h:16,
                 from ../public/tier2/tier2.h:15,
                 from ../tier2/defaultfilesystem.cpp:8:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlvector.h:24,
                 from ../public/tier1/convar.h:21,
                 from ../public/tier1/tier1.h:16,
                 from ../public/tier2/tier2.h:15,
                 from ../tier2/defaultfilesystem.cpp:8:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
In file included from ../public/tier1/utlsymbol.h:17,
                 from ../public/filesystem.h:17,
                 from ../public/filesystem_init.h:14,
                 from ../tier2/defaultfilesystem.cpp:9:
../public/tier1/utlrbtree.h: In instantiation of ‘CUtlRBTree<T, I, L, M>::CUtlRBTree(int, int, const LessFunc_t&) [with T = CUtlSymbolTable::CStringPoolIndex; I = short unsigned int; L = CUtlSymbolTable::CLess; M = CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, short unsigned int>, short unsigned int>; CUtlRBTree<T, I, L, M>::LessFunc_t = CUtlSymbolTable::CLess]’:
../public/tier1/utlsymbol.h:149:114:   required from here
../public/tier1/utlrbtree.h:300:4: warning: ‘CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, short unsigned int, CUtlSymbolTable::CLess>::m_Elements’ will be initialized after [-Wreorder]
  M m_Elements;
    ^~~~~~~~~~
../public/tier1/utlrbtree.h:298:13: warning:   ‘CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, short unsigned int, CUtlSymbolTable::CLess>::LessFunc_t CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, short unsigned int, CUtlSymbolTable::CLess>::m_LessFunc’ [-Wreorder]
  LessFunc_t m_LessFunc;
             ^~~~~~~~~~
../public/tier1/utlrbtree.h:378:8: warning:   when initialized here [-Wreorder]
 inline CUtlRBTree<T, I, L, M>::CUtlRBTree( int growSize, int initSize, const LessFunc_t &lessfunc ) :
        ^~~~~~~~~~~~~~~~~~~~~~

In file included from ../public/mathlib/ssemath.h:12,
                 from ../public/mathlib/lightdesc.h:11,
                 from ../public/materialsystem/imaterialsystem.h:245,
                 from ../tier2/renderutils.cpp:10:
../common/sse2neon.h:122:2: error: #error "Unsupported target. Must be either ARMv7-A+NEON or ARMv8-A."
 #error "Unsupported target. Must be either ARMv7-A+NEON or ARMv8-A."
  ^~~~~
In file included from ../public/togl/rendermechanism.h:46,
                 from ../tier2/renderutils.cpp:15:
../public/togl/linuxwin/cglmtex.h:149: warning: ignoring #pragma warning  [-Wunknown-pragmas]
 #pragma warning( push )
 
../public/togl/linuxwin/cglmtex.h:150: warning: ignoring #pragma warning  [-Wunknown-pragmas]
 #pragma warning( disable : 4200 )
 
../public/togl/linuxwin/cglmtex.h:173: warning: ignoring #pragma warning  [-Wunknown-pragmas]
 #pragma warning( pop )
 
In file included from ../public/tier1/utlvector.h:23,
                 from ../public/tier1/convar.h:21,
                 from ../public/tier1/tier1.h:16,
                 from ../public/tier2/tier2.h:15,
                 from ../public/tier2/renderutils.h:14,
                 from ../tier2/renderutils.cpp:7:
../public/tier0/threadtools.h: In member function ‘bool CThreadSpinRWLock::AssignIf(const CThreadSpinRWLock::LockInfo_t&, const CThreadSpinRWLock::LockInfo_t&)’:
../public/tier0/threadtools.h:1743:48: warning: cast from ‘volatile CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                ^~~~~~~~~~
../public/tier0/threadtools.h:1743:72: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                        ^~~~~~~~
../public/tier0/threadtools.h:1743:95: warning: cast from ‘const CThreadSpinRWLock::LockInfo_t*’ to ‘int64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  return ThreadInterlockedAssignIf64( (int64 *)&m_lockInfo, *((int64 *)&newValue), *((int64 *)&comperand) );
                                                                                               ^~~~~~~~~
In file included from ../public/tier1/utlmemory.h:22,
                 from ../public/tier1/utlvector.h:24,
                 from ../public/tier1/convar.h:21,
                 from ../public/tier1/tier1.h:16,
                 from ../public/tier2/tier2.h:15,
                 from ../public/tier2/renderutils.h:14,
                 from ../tier2/renderutils.cpp:7:
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t)’:
../public/tier0/memalloc.h:190:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAligned(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:208:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedUnattributed(size_t, size_t)’:
../public/tier0/memalloc.h:226:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
../public/tier0/memalloc.h: In function ‘void* MemAlloc_AllocAlignedFileLine(size_t, size_t, const char*, int)’:
../public/tier0/memalloc.h:244:28: warning: cast from ‘unsigned char*’ to ‘unsigned char**’ increases required alignment of target type [-Wcast-align]
  ((unsigned char**)(pResult))[-1] = pAlloc;
                            ^
In file included from ../public/tier2/renderutils.h:15,
                 from ../tier2/renderutils.cpp:7:
../public/Color.h: In constructor ‘Color::Color()’:
../public/Color.h:25:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = 0;
            ^~~~
../public/Color.h: In member function ‘void Color::SetRawColor(int)’:
../public/Color.h:59:12: warning: cast from ‘Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   *((int *)this) = color32;
            ^~~~
../public/Color.h: In member function ‘int Color::GetRawColor() const’:
../public/Color.h:64:19: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return *((int *)this);
                   ^~~~
../public/Color.h: In member function ‘bool Color::operator==(const Color&) const’:
../public/Color.h:84:21: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                     ^~~~
../public/Color.h:84:40: warning: cast from ‘const Color*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
   return ( *((int *)this) == *((int *)&rhs) );
                                        ^~~
In file included from ../public/materialsystem/imaterialsystem.h:27,
                 from ../tier2/renderutils.cpp:10:
../public/bitmap/imageformat.h: In member function ‘BGRA8888_t& BGRA8888_t::operator=(const BGRA8888_t&)’:
../public/bitmap/imageformat.h:185:22: warning: cast from ‘BGRA8888_t*’ to ‘unsigned int*’ increases required alignment of target type [-Wcast-align]
   *( unsigned int * )this = *( unsigned int * )&in;
                      ^~~~
../public/bitmap/imageformat.h:185:49: warning: cast from ‘const BGRA8888_t*’ to ‘unsigned int*’ increases required alignment of target type [-Wcast-align]
   *( unsigned int * )this = *( unsigned int * )&in;
                                                 ^~
../public/bitmap/imageformat.h: In member function ‘BGRX8888_t& BGRX8888_t::operator=(const BGRX8888_t&)’:
../public/bitmap/imageformat.h:198:22: warning: cast from ‘BGRX8888_t*’ to ‘unsigned int*’ increases required alignment of target type [-Wcast-align]
   *( unsigned int * )this = *( unsigned int * ) &in;
                      ^~~~
../public/bitmap/imageformat.h:198:50: warning: cast from ‘const BGRX8888_t*’ to ‘unsigned int*’ increases required alignment of target type [-Wcast-align]
   *( unsigned int * )this = *( unsigned int * ) &in;
                                                  ^~
In file included from ../public/materialsystem/imaterialsystem.h:27,
                 from ../tier2/renderutils.cpp:10:
../public/bitmap/imageformat.h: In constructor ‘ImageLoader::ResampleInfo_t::ResampleInfo_t()’:
../public/bitmap/imageformat.h:454:7: warning: ‘ImageLoader::ResampleInfo_t::m_nFlags’ will be initialized after [-Wreorder]
   int m_nFlags;
       ^~~~~~~~
../public/bitmap/imageformat.h:451:9: warning:   ‘float ImageLoader::ResampleInfo_t::m_flAlphaThreshhold’ [-Wreorder]
   float m_flAlphaThreshhold;
         ^~~~~~~~~~~~~~~~~~~
../public/bitmap/imageformat.h:428:3: warning:   when initialized here [-Wreorder]
   ResampleInfo_t() : m_nFlags(0), m_flAlphaThreshhold(0.4f), m_flAlphaHiFreqThreshhold(0.4f), m_nSrcDepth(1), m_nDestDepth(1)
   ^~~~~~~~~~~~~~
../public/bitmap/imageformat.h:452:9: warning: ‘ImageLoader::ResampleInfo_t::m_flAlphaHiFreqThreshhold’ will be initialized after [-Wreorder]
   float m_flAlphaHiFreqThreshhold;
         ^~~~~~~~~~~~~~~~~~~~~~~~~
../public/bitmap/imageformat.h:439:7: warning:   ‘int ImageLoader::ResampleInfo_t::m_nSrcDepth’ [-Wreorder]
   int m_nSrcDepth;
       ^~~~~~~~~~~
../public/bitmap/imageformat.h:428:3: warning:   when initialized here [-Wreorder]
   ResampleInfo_t() : m_nFlags(0), m_flAlphaThreshhold(0.4f), m_flAlphaHiFreqThreshhold(0.4f), m_nSrcDepth(1), m_nDestDepth(1)
   ^~~~~~~~~~~~~~
In file included from ../public/mathlib/ssemath.h:12,
                 from ../public/mathlib/lightdesc.h:11,
                 from ../public/materialsystem/imaterialsystem.h:245,
                 from ../tier2/renderutils.cpp:10:
../common/sse2neon.h: In function ‘__m128i _mm_sll_epi16(__m128i, __m128i)’:
../common/sse2neon.h:2652:46: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
     uint64_t c = vreinterpretq_nth_u64_m128i(count, 0);
                                              ^~~~~
../common/sse2neon.h:339:58: note: in definition of macro ‘vreinterpretq_nth_u64_m128i’
 #define vreinterpretq_nth_u64_m128i(x, n) (((SIMDVec *) &x)->m128_u64[n])
                                                          ^
../common/sse2neon.h: In function ‘__m128i _mm_sll_epi32(__m128i, __m128i)’:
../common/sse2neon.h:2671:46: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
     uint64_t c = vreinterpretq_nth_u64_m128i(count, 0);
                                              ^~~~~
../common/sse2neon.h:339:58: note: in definition of macro ‘vreinterpretq_nth_u64_m128i’
 #define vreinterpretq_nth_u64_m128i(x, n) (((SIMDVec *) &x)->m128_u64[n])
                                                          ^
../common/sse2neon.h: In function ‘__m128i _mm_sll_epi64(__m128i, __m128i)’:
../common/sse2neon.h:2688:46: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
     uint64_t c = vreinterpretq_nth_u64_m128i(count, 0);
                                              ^~~~~
../common/sse2neon.h:339:58: note: in definition of macro ‘vreinterpretq_nth_u64_m128i’
 #define vreinterpretq_nth_u64_m128i(x, n) (((SIMDVec *) &x)->m128_u64[n])
                                                          ^
../common/sse2neon.h: In function ‘__m128i _mm_srl_epi16(__m128i, __m128i)’:
../common/sse2neon.h:2707:46: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
     uint64_t c = vreinterpretq_nth_u64_m128i(count, 0);
                                              ^~~~~
../common/sse2neon.h:339:58: note: in definition of macro ‘vreinterpretq_nth_u64_m128i’
 #define vreinterpretq_nth_u64_m128i(x, n) (((SIMDVec *) &x)->m128_u64[n])
                                                          ^
../common/sse2neon.h: In function ‘__m128i _mm_srl_epi32(__m128i, __m128i)’:
../common/sse2neon.h:2726:46: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
     uint64_t c = vreinterpretq_nth_u64_m128i(count, 0);
                                              ^~~~~
../common/sse2neon.h:339:58: note: in definition of macro ‘vreinterpretq_nth_u64_m128i’
 #define vreinterpretq_nth_u64_m128i(x, n) (((SIMDVec *) &x)->m128_u64[n])
                                                          ^
../common/sse2neon.h: In function ‘__m128i _mm_srl_epi64(__m128i, __m128i)’:
../common/sse2neon.h:2743:46: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
     uint64_t c = vreinterpretq_nth_u64_m128i(count, 0);
                                              ^~~~~
../common/sse2neon.h:339:58: note: in definition of macro ‘vreinterpretq_nth_u64_m128i’
 #define vreinterpretq_nth_u64_m128i(x, n) (((SIMDVec *) &x)->m128_u64[n])
                                                          ^
../common/sse2neon.h: In function ‘void _mm_maskmoveu_si128(__m128i, __m128i, char*)’:
../common/sse2neon.h:3792:44: warning: cast from ‘char*’ to ‘const float*’ increases required alignment of target type [-Wcast-align]
     __m128 b = _mm_load_ps((const float *) mem_addr);
                                            ^~~~~~~~
../common/sse2neon.h: In function ‘__m128i _mm_aesenclast_si128(__m128i, __m128i)’:
../common/sse2neon.h:7302:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
         [0] = {SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 0)],
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7303:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
                SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 5)],
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7304:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
                SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 10)],
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7305:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
                SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 15)]},
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7306:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
         [1] = {SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 4)],
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7307:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
                SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 9)],
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7308:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
                SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 14)],
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7309:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
                SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 3)]},
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7310:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
         [2] = {SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 8)],
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7311:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
                SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 13)],
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7312:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
                SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 2)],
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7313:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
                SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 7)]},
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7314:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
         [3] = {SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 12)],
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7315:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
                SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 1)],
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7316:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
                SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 6)],
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7317:57: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
                SSE2NEON_sbox[vreinterpretq_nth_u8_m128i(a, 11)]},
                                                         ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7320:36: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
         vreinterpretq_nth_u8_m128i(a, i) =
                                    ^
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
../common/sse2neon.h:7321:58: warning: cast from ‘__m128i*’ {aka ‘__vector(2) long long int*’} to ‘SIMDVec*’ increases required alignment of target type [-Wcast-align]
             v[i / 4][i % 4] ^ vreinterpretq_nth_u8_m128i(RoundKey, i);
                                                          ^~~~~~~~
../common/sse2neon.h:341:57: note: in definition of macro ‘vreinterpretq_nth_u8_m128i’
 #define vreinterpretq_nth_u8_m128i(x, n) (((SIMDVec *) &x)->m128_u8[n])
                                                         ^
In file included from ../public/mathlib/ssemath.h:12,
                 from ../public/mathlib/lightdesc.h:11,
                 from ../public/materialsystem/imaterialsystem.h:245,
                 from ../tier2/renderutils.cpp:10:
../common/sse2neon.h: In function ‘void _mm_maskmove_si64(__m64, __m64, char*)’:
../common/sse2neon.h:7498:44: warning: cast from ‘char*’ to ‘const float*’ increases required alignment of target type [-Wcast-align]
     __m128 b = _mm_load_ps((const float *) mem_addr);
                                            ^~~~~~~~
../common/sse2neon.h: At global scope:
../common/sse2neon.h:7595:9: warning: ‘#pragma GCC pop_options’ without a corresponding ‘#pragma GCC push_options’ [-Wpragmas]
 #pragma GCC pop_options
         ^~~
In file included from ../public/mathlib/lightdesc.h:11,
                 from ../public/materialsystem/imaterialsystem.h:245,
                 from ../tier2/renderutils.cpp:10:
../public/mathlib/ssemath.h: In function ‘void ConvertStoreAsIntsSIMD(intx4*, const fltx4&)’:
../public/mathlib/ssemath.h:2423:41: warning: cast from ‘int*’ to ‘__m64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  *reinterpret_cast<__m64 *>(&(*pDest)[0]) = bottom;
                                         ^
../public/mathlib/ssemath.h:2424:41: warning: cast from ‘int*’ to ‘__m64*’ {aka ‘long long int*’} increases required alignment of target type [-Wcast-align]
  *reinterpret_cast<__m64 *>(&(*pDest)[2]) = top;
                                         ^
In file included from ../tier2/renderutils.cpp:11:
../public/materialsystem/imesh.h: In function ‘float* OffsetFloatPointer(float*, int, int)’:
../public/materialsystem/imesh.h:203:28: warning: cast from ‘unsigned char*’ to ‘float*’ increases required alignment of target type [-Wcast-align]
   nVertexCount * vertexSize);
                            ^
../public/materialsystem/imesh.h: In function ‘const float* OffsetFloatPointer(const float*, int, int)’:
../public/materialsystem/imesh.h:210:28: warning: cast from ‘const unsigned char*’ to ‘const float*’ increases required alignment of target type [-Wcast-align]
   nVertexCount * vertexSize);
                            ^
../public/materialsystem/imesh.h: In function ‘void IncrementFloatPointer(float*&, int)’:
../public/materialsystem/imesh.h:215:109: warning: cast from ‘unsigned char*’ to ‘float*’ increases required alignment of target type [-Wcast-align]
  pBufferPointer = reinterpret_cast<float*>( reinterpret_cast<unsigned char*>( pBufferPointer ) + vertexSize );
                                                                                                             ^
In file included from ../public/materialsystem/imesh.h:374,
                 from ../tier2/renderutils.cpp:11:
../public/materialsystem/meshreader.h: In member function ‘const Vector& CMeshReader::Position(int) const’:
../public/materialsystem/meshreader.h:187:72: warning: cast from ‘char*’ to ‘Vector*’ increases required alignment of target type [-Wcast-align]
  return *(Vector*)((char*)m_pPosition + iVertex * m_VertexSize_Position);
                                                                        ^
../public/materialsystem/meshreader.h: In member function ‘const float* CMeshReader::TexCoord(int, int) const’:
../public/materialsystem/meshreader.h:200:88: warning: cast from ‘char*’ to ‘float*’ increases required alignment of target type [-Wcast-align]
  return (float*)( (char*)m_pTexCoord[iStage] + iVertex * m_VertexSize_TexCoord[iStage] );
                                                                                        ^
../public/materialsystem/meshreader.h: In member function ‘void CMeshReader::TexCoord2f(int, int, float&, float&) const’:
../public/materialsystem/meshreader.h:206:92: warning: cast from ‘char*’ to ‘float*’ increases required alignment of target type [-Wcast-align]
  float *p = (float*)( (char*)m_pTexCoord[iStage] + iVertex * m_VertexSize_TexCoord[iStage] );
                                                                                            ^
../public/materialsystem/meshreader.h: In member function ‘const Vector2D& CMeshReader::TexCoordVector2D(int, int) const’:
../public/materialsystem/meshreader.h:214:98: warning: cast from ‘char*’ to ‘Vector2D*’ increases required alignment of target type [-Wcast-align]
  Vector2D *p = (Vector2D*)( (char*)m_pTexCoord[iStage] + iVertex * m_VertexSize_TexCoord[iStage] );
                                                                                                  ^
../public/materialsystem/meshreader.h: In member function ‘float CMeshReader::Wrinkle(int) const’:
../public/materialsystem/meshreader.h:221:71: warning: cast from ‘char*’ to ‘float*’ increases required alignment of target type [-Wcast-align]
  return *(float*)( (char*)m_pWrinkle + iVertex * m_VertexSize_Wrinkle );
                                                                       ^
../public/materialsystem/meshreader.h: In member function ‘const Vector& CMeshReader::Normal(int) const’:
../public/materialsystem/meshreader.h:232:92: warning: cast from ‘char*’ to ‘const float*’ increases required alignment of target type [-Wcast-align]
  return *(const Vector *)(const float*)( (char*)m_pNormal + iVertex  * m_VertexSize_Normal );
                                                                                            ^
../public/materialsystem/meshreader.h: In member function ‘void CMeshReader::Normal(int, Vector&) const’:
../public/materialsystem/meshreader.h:238:84: warning: cast from ‘char*’ to ‘const float*’ increases required alignment of target type [-Wcast-align]
  const float *p = (const float*)( (char*)m_pNormal + iVertex * m_VertexSize_Normal );
                                                                                    ^
../public/materialsystem/meshreader.h: In member function ‘const Vector& CMeshReader::TangentS(int) const’:
../public/materialsystem/meshreader.h:245:80: warning: cast from ‘char*’ to ‘const Vector*’ increases required alignment of target type [-Wcast-align]
  return *(const Vector*)( (char*)m_pTangentS + iVertex * m_VertexSize_TangentS );
                                                                                ^
../public/materialsystem/meshreader.h: In member function ‘const Vector& CMeshReader::TangentT(int) const’:
../public/materialsystem/meshreader.h:251:80: warning: cast from ‘char*’ to ‘const Vector*’ increases required alignment of target type [-Wcast-align]
  return *(const Vector*)( (char*)m_pTangentT + iVertex * m_VertexSize_TangentT );
                                                                                ^
../public/materialsystem/meshreader.h: In member function ‘float CMeshReader::BoneWeight(int) const’:
../public/materialsystem/meshreader.h:257:80: warning: cast from ‘char*’ to ‘float*’ increases required alignment of target type [-Wcast-align]
  float *p = (float*)( (char*)m_pBoneWeight + iVertex * m_VertexSize_BoneWeight );
                                                                                ^
In file included from ../tier2/renderutils.cpp:11:
../public/materialsystem/imesh.h: In member function ‘void CVertexBuilder::Reset()’:
../public/materialsystem/imesh.h:971:21: warning: comparison of integer expressions of different signedness: ‘int’ and ‘unsigned int’ [-Wsign-compare]
  for ( int i = 0; i < NELEMS( m_pCurrTexCoord ); i++ )
../public/materialsystem/imesh.h: In member function ‘void CVertexBuilder::FastVertexSSE(const ModelVertexDX7_t&)’:
../public/materialsystem/imesh.h:1246:36: warning: cast from ‘const char*’ to ‘float*’ increases required alignment of target type [-Wcast-align]
  __m128 m1 = _mm_load_ps( (float *)pRead );
                                    ^~~~~
../public/materialsystem/imesh.h:1249:26: warning: cast from ‘char*’ to ‘float*’ increases required alignment of target type [-Wcast-align]
  _mm_stream_ps( (float *)pCurrPos, m1 );
                          ^~~~~~~~
../public/materialsystem/imesh.h: In member function ‘void CVertexBuilder::Color3f(float, float, float)’:
../public/materialsystem/imesh.h:1810:9: warning: cast from ‘unsigned char*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
  *(int*)m_pCurrColor = col;
         ^~~~~~~~~~~~
../public/materialsystem/imesh.h: In member function ‘void CVertexBuilder::Color3fv(const float*)’:
../public/materialsystem/imesh.h:1826:9: warning: cast from ‘unsigned char*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
  *(int*)m_pCurrColor = col;
         ^~~~~~~~~~~~
../public/materialsystem/imesh.h: In member function ‘void CVertexBuilder::Color4f(float, float, float, float)’:
../public/materialsystem/imesh.h:1841:9: warning: cast from ‘unsigned char*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
  *(int*)m_pCurrColor = col;
         ^~~~~~~~~~~~
../public/materialsystem/imesh.h: In member function ‘void CVertexBuilder::Color4fv(const float*)’:
../public/materialsystem/imesh.h:1857:9: warning: cast from ‘unsigned char*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
  *(int*)m_pCurrColor = col;
         ^~~~~~~~~~~~
../public/materialsystem/imesh.h: In member function ‘void CVertexBuilder::Color3ub(unsigned char, unsigned char, unsigned char)’:
../public/materialsystem/imesh.h:1876:9: warning: cast from ‘unsigned char*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
  *(int*)m_pCurrColor = col;
         ^~~~~~~~~~~~
../public/materialsystem/imesh.h: In member function ‘void CVertexBuilder::Color3ubv(const unsigned char*)’:
../public/materialsystem/imesh.h:1889:9: warning: cast from ‘unsigned char*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
  *(int*)m_pCurrColor = col;
         ^~~~~~~~~~~~
../public/materialsystem/imesh.h: In member function ‘void CVertexBuilder::Color4ub(unsigned char, unsigned char, unsigned char, unsigned char)’:
../public/materialsystem/imesh.h:1901:9: warning: cast from ‘unsigned char*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
  *(int*)m_pCurrColor = col;
         ^~~~~~~~~~~~
../public/materialsystem/imesh.h: In member function ‘void CVertexBuilder::Color4ubv(const unsigned char*)’:
../public/materialsystem/imesh.h:1913:9: warning: cast from ‘unsigned char*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
  *(int*)m_pCurrColor = col;
         ^~~~~~~~~~~~
../public/materialsystem/imesh.h: In member function ‘void CVertexBuilder::Specular3f(float, float, float)’:
../public/materialsystem/imesh.h:1929:9: warning: cast from ‘unsigned char*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
  *(int*)pSpecular = col;
         ^~~~~~~~~
../public/materialsystem/imesh.h: In member function ‘void CVertexBuilder::Specular3fv(const float*)’:
../public/materialsystem/imesh.h:1946:9: warning: cast from ‘unsigned char*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
  *(int*)pSpecular = col;
         ^~~~~~~~~
../public/materialsystem/imesh.h: In member function ‘void CVertexBuilder::Specular4f(float, float, float, float)’:
../public/materialsystem/imesh.h:1962:9: warning: cast from ‘unsigned char*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
  *(int*)pSpecular = col;
         ^~~~~~~~~
../public/materialsystem/imesh.h: In member function ‘void CVertexBuilder::Specular4fv(const float*)’:
../public/materialsystem/imesh.h:1979:9: warning: cast from ‘unsigned char*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
  *(int*)pSpecular = col;
         ^~~~~~~~~
../public/materialsystem/imesh.h: In member function ‘void CVertexBuilder::Specular3ub(unsigned char, unsigned char, unsigned char)’:
../public/materialsystem/imesh.h:1993:9: warning: cast from ‘unsigned char*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
  *(int*)pSpecular = col;
         ^~~~~~~~~
../public/materialsystem/imesh.h: In member function ‘void CVertexBuilder::Specular3ubv(const unsigned char*)’:
../public/materialsystem/imesh.h:2007:9: warning: cast from ‘unsigned char*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
  *(int*)pSpecular = col;
         ^~~~~~~~~
../public/materialsystem/imesh.h: In member function ‘void CVertexBuilder::Specular4ub(unsigned char, unsigned char, unsigned char, unsigned char)’:
../public/materialsystem/imesh.h:2021:9: warning: cast from ‘unsigned char*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
  *(int*)pSpecular = col;
         ^~~~~~~~~
../public/materialsystem/imesh.h: In member function ‘void CVertexBuilder::Specular4ubv(const unsigned char*)’:
../public/materialsystem/imesh.h:2035:9: warning: cast from ‘unsigned char*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
  *(int*)pSpecular = col;
         ^~~~~~~~~
../public/materialsystem/imesh.h: In constructor ‘CIndexBuilder::CIndexBuilder()’:
../public/materialsystem/imesh.h:2491:15: warning: ‘CIndexBuilder::m_nCurrentIndex’ will be initialized after [-Wreorder]
  mutable int  m_nCurrentIndex;
               ^~~~~~~~~~~~~~~
../public/materialsystem/imesh.h:2482:9: warning:   ‘int CIndexBuilder::m_nMaxIndexCount’ [-Wreorder]
  int    m_nMaxIndexCount;
         ^~~~~~~~~~~~~~~~
../public/materialsystem/imesh.h:2514:8: warning:   when initialized here [-Wreorder]
 inline CIndexBuilder::CIndexBuilder() : m_pIndexBuffer(0), m_nIndexCount(0),
        ^~~~~~~~~~~~~
../public/materialsystem/imesh.h: In member function ‘void CIndexBuilder::FastIndex2(short unsigned int, short unsigned int)’:
../public/materialsystem/imesh.h:2990:40: warning: cast from ‘short unsigned int*’ to ‘int*’ increases required alignment of target type [-Wcast-align]
  *(int*)( &m_pIndices[m_nCurrentIndex] ) = nIndices;
                                        ^
In file included from ../tier2/renderutils.cpp:13:
../public/tier0/vprof.h: In constructor ‘CVProfNode::CVProfNode(const tchar*, int, CVProfNode*, const tchar*, int)’:
../public/tier0/vprof.h:390:11: warning: ‘CVProfNode::m_nPrevFrameCalls’ will be initialized after [-Wreorder]
  unsigned m_nPrevFrameCalls;
           ^~~~~~~~~~~~~~~~~
../public/tier0/vprof.h:385:8: warning:   ‘int CVProfNode::m_nRecursions’ [-Wreorder]
  int   m_nRecursions;
        ^~~~~~~~~~~~~
../public/tier0/vprof.h:778:8: warning:   when initialized here [-Wreorder]
 inline CVProfNode::CVProfNode( const tchar * pszName, int detailLevel, CVProfNode *pParent, const tchar *pBudgetGroupName, int budgetFlags )
        ^~~~~~~~~~
In file included from ../public/togl/rendermechanism.h:52,
                 from ../tier2/renderutils.cpp:15:
../public/togl/linuxwin/dxabstract.h: In static member function ‘static bool RenderTargetState_t::LessFunc(const RenderTargetState_t&, const RenderTargetState_t&)’:
../public/togl/linuxwin/dxabstract.h:377:70: warning: cast from ‘CGLMTex* const*’ to ‘const uint64*’ {aka ‘const long long unsigned int*’} increases required alignment of target type [-Wcast-align]
   uint64 lhs0 = reinterpret_cast<const uint64 *>(lhs.m_pRenderTargets)[0];
                                                                      ^
../public/togl/linuxwin/dxabstract.h:378:70: warning: cast from ‘CGLMTex* const*’ to ‘const uint64*’ {aka ‘const long long unsigned int*’} increases required alignment of target type [-Wcast-align]
   uint64 rhs0 = reinterpret_cast<const uint64 *>(rhs.m_pRenderTargets)[0];
                                                                      ^
../public/togl/linuxwin/dxabstract.h:383:71: warning: cast from ‘CGLMTex* const*’ to ‘const uint64*’ {aka ‘const long long unsigned int*’} increases required alignment of target type [-Wcast-align]
    uint64 lhs1 = reinterpret_cast<const uint64 *>(lhs.m_pRenderTargets)[1];
                                                                       ^
../public/togl/linuxwin/dxabstract.h:384:71: warning: cast from ‘CGLMTex* const*’ to ‘const uint64*’ {aka ‘const long long unsigned int*’} increases required alignment of target type [-Wcast-align]
    uint64 rhs1 = reinterpret_cast<const uint64 *>(rhs.m_pRenderTargets)[1];
                                                                       ^

Waf: Leaving directory `/home/pi/Downloads/source-engine/build'
Build failed
 -> task in 'tier2' failed with exit status 1 (run with -v to display more information)
 -> task in 'tier2' failed with exit status 1 (run with -v to display more information)
